"""
@file: tests/unit/test_error_handler.py
@description: –ú–æ–¥—É–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
@dependencies: pytest, unittest.mock
@created: 2025-01-21
"""

import pytest
from unittest.mock import Mock, AsyncMock, patch
from datetime import datetime, timedelta

from utils.error_handler import ErrorHandler, ErrorSeverity, handle_errors


@pytest.mark.unit
class TestErrorHandler:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    
    @pytest.fixture
    def error_handler(self, mock_bot):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ ErrorHandler –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        handler = ErrorHandler(mock_bot)
        return handler
    
    @pytest.mark.asyncio
    async def test_handle_error_low_severity(self, error_handler):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –Ω–∏–∑–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
        error = ValueError("Test error")
        
        await error_handler.handle_error(
            error, 
            "test_context", 
            ErrorSeverity.LOW,
            user_id=123456
        )
        
        # –î–ª—è –Ω–∏–∑–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω—É
        assert not error_handler.bot.send_message.called
    
    @pytest.mark.asyncio
    async def test_handle_error_critical_severity(self, error_handler):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏"""
        error = Exception("Critical error")
        
        with patch('config.ADMIN_IDS', [123456]):
            await error_handler.handle_error(
                error,
                "critical_context",
                ErrorSeverity.CRITICAL,
                user_id=789012
            )
        
        # –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        error_handler.bot.send_message.assert_called_once()
        call_args = error_handler.bot.send_message.call_args[0]
        assert "üö®" in call_args[1]  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π emoji
        assert "Critical error" in call_args[1]
    
    @pytest.mark.asyncio
    async def test_handle_error_high_severity(self, error_handler):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
        error = RuntimeError("High severity error")
        
        with patch('config.ADMIN_IDS', [123456]):
            await error_handler.handle_error(
                error,
                "high_context",
                ErrorSeverity.HIGH,
                additional_info={"component": "test"}
            )
        
        error_handler.bot.send_message.assert_called_once()
        call_args = error_handler.bot.send_message.call_args[0]
        assert "‚ö†Ô∏è" in call_args[1]  # –ü—Ä–æ–≤–µ—Ä—è–µ–º warning emoji
        assert "component: test" in call_args[1]
    
    @pytest.mark.asyncio
    async def test_rate_limiting(self, error_handler):
        """–¢–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        error = Exception("Repeated error")
        
        with patch('config.ADMIN_IDS', [123456]):
            # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await error_handler.handle_error(
                error, "test_context", ErrorSeverity.HIGH
            )
            
            # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await error_handler.handle_error(
                error, "test_context", ErrorSeverity.HIGH
            )
        
        # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤—ã–∑–æ–≤ send_message
        assert error_handler.bot.send_message.call_count == 1
    
    @pytest.mark.asyncio
    async def test_rate_limiting_expired(self, error_handler):
        """–¢–µ—Å—Ç –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"""
        error = Exception("Repeated error")
        error_key = f"{type(error).__name__}_test_context"
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –ø—Ä–æ—à–ª–æ–º
        error_handler.last_notification[error_key] = datetime.now() - timedelta(minutes=10)
        
        with patch('config.ADMIN_IDS', [123456]):
            await error_handler.handle_error(
                error, "test_context", ErrorSeverity.HIGH
            )
        
        # –î–æ–ª–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
        error_handler.bot.send_message.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_multiple_admins_notification(self, error_handler):
        """–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        error = Exception("Multi admin error")
        admin_ids = [123456, 789012, 555777]
        
        with patch('config.ADMIN_IDS', admin_ids):
            await error_handler.handle_error(
                error, "multi_admin", ErrorSeverity.CRITICAL
            )
        
        # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        assert error_handler.bot.send_message.call_count == len(admin_ids)
    
    @pytest.mark.asyncio
    async def test_telegram_api_error_during_notification(self, error_handler):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ Telegram API –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        from aiogram.exceptions import TelegramAPIError
        
        error = Exception("Original error")
        error_handler.bot.send_message.side_effect = TelegramAPIError("API Error")
        
        with patch('config.ADMIN_IDS', [123456]):
            # –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            await error_handler.handle_error(
                error, "telegram_error", ErrorSeverity.HIGH
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∞ –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        error_handler.bot.send_message.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_no_bot_instance(self):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–∫–∏ –±–µ–∑ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞"""
        handler = ErrorHandler()  # –ë–µ–∑ –±–æ—Ç–∞
        error = Exception("No bot error")
        
        # –ù–µ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        await handler.handle_error(error, "no_bot", ErrorSeverity.HIGH)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ —É–ø–∞–ª
        assert True
    
    @pytest.mark.asyncio
    async def test_no_admin_ids(self, error_handler):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
        error = Exception("No admins error")
        
        with patch('config.ADMIN_IDS', []):
            await error_handler.handle_error(
                error, "no_admins", ErrorSeverity.CRITICAL
            )
        
        # –ù–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        assert not error_handler.bot.send_message.called


@pytest.mark.unit
class TestHandleErrorsDecorator:
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ handle_errors"""
    
    @pytest.mark.asyncio
    async def test_successful_function_execution(self):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ —Å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º"""
        @handle_errors(context="test_success", severity=ErrorSeverity.MEDIUM)
        async def test_function():
            return "success"
        
        result = await test_function()
        assert result == "success"
    
    @pytest.mark.asyncio
    async def test_function_with_exception(self, error_handler_mock):
        """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —Å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º"""
        @handle_errors(
            context="test_exception", 
            severity=ErrorSeverity.HIGH,
            fallback_return="fallback"
        )
        async def failing_function():
            raise ValueError("Test exception")
        
        with patch('utils.error_handler.error_handler', error_handler_mock):
            result = await failing_function()
        
        assert result == "fallback"
        error_handler_mock.handle_error.assert_called_once()
    
    @pytest.mark.asyncio
    async def test_decorator_with_message_object(self, mock_message, error_handler_mock):
        """–¢–µ—Å—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ —Å –æ–±—ä–µ–∫—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        @handle_errors(
            context="test_message",
            severity=ErrorSeverity.MEDIUM,
            notify_user=True
        )
        async def handler_function(message):
            raise RuntimeError("Handler error")
        
        with patch('utils.error_handler.error_handler', error_handler_mock):
            result = await handler_function(mock_message)
        
        assert result is None
        mock_message.answer.assert_called_once()
        error_text = mock_message.answer.call_args[0][0]
        assert "–æ—à–∏–±–∫–∞" in error_text.lower()
    
    @pytest.mark.asyncio
    async def test_decorator_critical_error_notification(self, mock_message, error_handler_mock):
        """–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ"""
        @handle_errors(
            context="test_critical",
            severity=ErrorSeverity.CRITICAL,
            notify_user=True
        )
        async def critical_function(message):
            raise Exception("Critical failure")
        
        with patch('utils.error_handler.error_handler', error_handler_mock):
            await critical_function(mock_message)
        
        mock_message.answer.assert_called_once()
        error_text = mock_message.answer.call_args[0][0]
        assert "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞" in error_text.lower()
    
    @pytest.mark.asyncio
    async def test_decorator_without_user_notification(self, mock_message, error_handler_mock):
        """–¢–µ—Å—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        @handle_errors(
            context="test_no_notify",
            severity=ErrorSeverity.HIGH,
            notify_user=False
        )
        async def silent_function(message):
            raise ValueError("Silent error")
        
        with patch('utils.error_handler.error_handler', error_handler_mock):
            await silent_function(mock_message)
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        mock_message.answer.assert_not_called()
    
    @pytest.mark.asyncio
    async def test_decorator_user_id_extraction(self, error_handler_mock):
        """–¢–µ—Å—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏—è user_id –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏"""
        class MockObject:
            def __init__(self, user_id):
                self.from_user = Mock()
                self.from_user.id = user_id
        
        @handle_errors(context="test_user_id", severity=ErrorSeverity.HIGH)
        async def function_with_user_id(obj):
            raise Exception("Error with user")
        
        mock_obj = MockObject(123456)
        
        with patch('utils.error_handler.error_handler', error_handler_mock):
            await function_with_user_id(mock_obj)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_id –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        error_handler_mock.handle_error.assert_called_once()
        call_kwargs = error_handler_mock.handle_error.call_args[1]
        assert call_kwargs['user_id'] == 123456
    
    @pytest.mark.asyncio
    async def test_decorator_additional_info(self, error_handler_mock):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        @handle_errors(context="test_info", severity=ErrorSeverity.MEDIUM)
        async def test_function():
            raise ValueError("Error with info")
        
        with patch('utils.error_handler.error_handler', error_handler_mock):
            await test_function()
        
        error_handler_mock.handle_error.assert_called_once()
        call_kwargs = error_handler_mock.handle_error.call_args[1]
        
        assert 'additional_info' in call_kwargs
        additional_info = call_kwargs['additional_info']
        assert 'function' in additional_info
        assert 'module' in additional_info
        assert additional_info['function'] == 'test_function'
    
    @pytest.mark.asyncio
    async def test_decorator_with_callback_query(self, mock_callback_query, error_handler_mock):
        """–¢–µ—Å—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ —Å callback query"""
        @handle_errors(
            context="test_callback",
            severity=ErrorSeverity.MEDIUM,
            notify_user=True
        )
        async def callback_handler(callback):
            raise RuntimeError("Callback error")
        
        # –£ callback query –Ω–µ—Ç –º–µ—Ç–æ–¥–∞ answer, –Ω–æ –µ—Å—Ç—å message
        mock_callback_query.message.answer = AsyncMock()
        
        with patch('utils.error_handler.error_handler', error_handler_mock):
            await callback_handler(mock_callback_query)
        
        # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ,
        # —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –ø—Ä—è–º–æ–≥–æ –º–µ—Ç–æ–¥–∞ answer —É callback
        error_handler_mock.handle_error.assert_called_once()
    
    def test_decorator_parameters(self):
        """–¢–µ—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞"""
        @handle_errors(
            context="test_params",
            severity=ErrorSeverity.LOW,
            fallback_return="default",
            notify_user=False
        )
        async def decorated_function():
            pass
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –æ–±–µ—Ä–Ω—É—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        assert hasattr(decorated_function, '__wrapped__')
        assert decorated_function.__name__ == 'decorated_function' 