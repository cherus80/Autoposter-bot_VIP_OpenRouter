#!/usr/bin/env python3
"""
@file: tests/run_tests.py
@description: –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å –æ—Ç—á–µ—Ç–∞–º–∏
@dependencies: pytest, coverage
@created: 2025-01-21
"""

import os
import sys
import argparse
import subprocess
from pathlib import Path


def run_command(cmd, description):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º –æ–ø–∏—Å–∞–Ω–∏—è"""
    print(f"\n{'='*60}")
    print(f"üîÑ {description}")
    print(f"{'='*60}")
    
    result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
    
    if result.stdout:
        print(result.stdout)
    if result.stderr:
        print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è/–û—à–∏–±–∫–∏:\n{result.stderr}")
    
    if result.returncode != 0:
        print(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: {result.returncode})")
        return False
    else:
        print(f"‚úÖ {description} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        return True


def install_dependencies():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    deps = [
        "pytest",
        "pytest-asyncio", 
        "pytest-cov",
        "pytest-html",
        "pytest-xdist",  # –î–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        "coverage[toml]",
        "aiosqlite",
        "aiogram-tests"
    ]
    
    cmd = f"{sys.executable} -m pip install {' '.join(deps)}"
    return run_command(cmd, "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")


def run_unit_tests():
    """–ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    cmd = "pytest tests/unit/ -v --tb=short -m unit"
    return run_command(cmd, "–ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")


def run_integration_tests():
    """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    cmd = "pytest tests/integration/ -v --tb=short -m integration"
    return run_command(cmd, "–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")


def run_functional_tests():
    """–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    cmd = "pytest tests/functional/ -v --tb=short -m functional"
    return run_command(cmd, "–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤")


def run_all_tests_with_coverage():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å –∏–∑–º–µ—Ä–µ–Ω–∏–µ–º –ø–æ–∫—Ä—ã—Ç–∏—è"""
    cmd = (
        "pytest tests/ -v --tb=short "
        "--cov=. "
        "--cov-report=html:tests/reports/coverage_html "
        "--cov-report=xml:tests/reports/coverage.xml "
        "--cov-report=term-missing "
        "--cov-config=tests/.coveragerc "
        "--html=tests/reports/report.html --self-contained-html"
    )
    return run_command(cmd, "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞")


def run_parallel_tests():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
    import multiprocessing
    num_cores = multiprocessing.cpu_count()
    
    cmd = f"pytest tests/ -v -n {num_cores} --tb=short"
    return run_command(cmd, f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ ({num_cores} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤)")


def run_specific_test_file(test_file):
    """–ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Ç–µ—Å—Ç–æ–≤"""
    cmd = f"pytest {test_file} -v --tb=long"
    return run_command(cmd, f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ {test_file}")


def run_tests_by_marker(marker):
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ –º–∞—Ä–∫–µ—Ä—É"""
    cmd = f"pytest tests/ -v -m {marker} --tb=short"
    return run_command(cmd, f"–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –º–∞—Ä–∫–µ—Ä–æ–º '{marker}'")


def generate_coverage_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏"""
    cmd = "coverage html -d tests/reports/coverage_html"
    return run_command(cmd, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML –æ—Ç—á–µ—Ç–∞ –æ –ø–æ–∫—Ä—ã—Ç–∏–∏ –∫–æ–¥–∞")


def create_test_structure():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    dirs = [
        "tests/reports",
        "tests/unit",
        "tests/integration", 
        "tests/functional",
        "tests/fixtures"
    ]
    
    for dir_path in dirs:
        Path(dir_path).mkdir(parents=True, exist_ok=True)
    
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è —Ç–µ—Å—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∞")


def create_coverage_config():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ coverage"""
    config_content = """
[run]
source = .
omit = 
    tests/*
    venv/*
    __pycache__/*
    .git/*
    backups/*
    *.pyc
    */migrations/*
    setup.py

[report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\\bProtocol\\):
    @(abc\\.)?abstractmethod

[html]
directory = tests/reports/coverage_html
"""
    
    config_path = Path("tests/.coveragerc")
    config_path.write_text(config_content.strip())
    print("‚úÖ –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ coverage —Å–æ–∑–¥–∞–Ω")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è Autoposter Bot")
    parser.add_argument(
        "--type", 
        choices=["unit", "integration", "functional", "all", "parallel"],
        default="all",
        help="–¢–∏–ø —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞"
    )
    parser.add_argument(
        "--marker", 
        help="–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –º–∞—Ä–∫–µ—Ä—É"
    )
    parser.add_argument(
        "--file", 
        help="–ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Ç–µ—Å—Ç–æ–≤"
    )
    parser.add_argument(
        "--install-deps", 
        action="store_true",
        help="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    )
    parser.add_argument(
        "--coverage", 
        action="store_true",
        help="–í–∫–ª—é—á–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–¥–∞"
    )
    parser.add_argument(
        "--setup", 
        action="store_true",
        help="–°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    )
    
    args = parser.parse_args()
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
    os.chdir(Path(__file__).parent.parent)
    
    print("üß™ Autoposter Bot - –°–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("=" * 60)
    
    success = True
    
    if args.setup:
        create_test_structure()
        create_coverage_config()
        return
    
    if args.install_deps:
        success = install_dependencies()
        if not success:
            return
    
    if args.file:
        success = run_specific_test_file(args.file)
    elif args.marker:
        success = run_tests_by_marker(args.marker)
    elif args.type == "unit":
        success = run_unit_tests()
    elif args.type == "integration":
        success = run_integration_tests()
    elif args.type == "functional":
        success = run_functional_tests()
    elif args.type == "parallel":
        success = run_parallel_tests()
    elif args.type == "all":
        if args.coverage:
            success = run_all_tests_with_coverage()
        else:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤ –ø–æ –æ—á–µ—Ä–µ–¥–∏
            success &= run_unit_tests()
            success &= run_integration_tests()
            success &= run_functional_tests()
    
    print("\n" + "="*60)
    if success:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤
        reports_dir = Path("tests/reports")
        if reports_dir.exists():
            print(f"\nüìä –û—Ç—á–µ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã –≤: {reports_dir.absolute()}")
            
            html_report = reports_dir / "report.html"
            if html_report.exists():
                print(f"  ‚Ä¢ HTML –æ—Ç—á–µ—Ç —Ç–µ—Å—Ç–æ–≤: {html_report}")
                
            coverage_html = reports_dir / "coverage_html" / "index.html"
            if coverage_html.exists():
                print(f"  ‚Ä¢ HTML –æ—Ç—á–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏—è: {coverage_html}")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏!")
        sys.exit(1)


if __name__ == "__main__":
    main() 