#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import logging
from datetime import datetime, timedelta
from database.settings_db import get_setting
from database.posts_db import get_last_post_time, count_posts, get_recent_posts
from managers.content_plan_manager import ContentPlanManager
from managers.prompt_manager import PromptManager
from managers.publishing_manager import PublishingManager
from config import ADMIN_ID

logging.basicConfig(level=logging.INFO)

async def diagnose_autoposting():
    """–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–í–¢–û–ü–û–°–¢–ò–ù–ì–ê")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print("\nüìä –û–°–ù–û–í–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò:")
    auto_mode = await get_setting("auto_mode_status", "off")
    auto_enabled = await get_setting("auto_posting_enabled", "0")
    interval_min = await get_setting("post_interval_minutes", "240")
    
    print(f"‚Ä¢ auto_mode_status: {auto_mode}")
    print(f"‚Ä¢ auto_posting_enabled: {auto_enabled}")
    print(f"‚Ä¢ post_interval_minutes: {interval_min}")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    print("\nüì§ –ù–ê–°–¢–†–û–ô–ö–ò –ü–£–ë–õ–ò–ö–ê–¶–ò–ò:")
    publishing_manager = PublishingManager()
    pub_settings = await publishing_manager.get_settings(user_id=int(ADMIN_ID))
    print(f"‚Ä¢ publish_to_tg: {pub_settings.publish_to_tg}")
    print(f"‚Ä¢ publish_to_vk: {pub_settings.publish_to_vk}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω
    print("\nüìù –ö–û–ù–¢–ï–ù–¢-–ü–õ–ê–ù:")
    content_manager = ContentPlanManager()
    total_topics = await content_manager.count_all_items()
    unused_topics = await content_manager.count_unused_items()
    next_topic = await content_manager.get_next_topic()
    
    print(f"‚Ä¢ –í—Å–µ–≥–æ —Ç–µ–º: {total_topics}")
    print(f"‚Ä¢ –ù–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö: {unused_topics}")
    print(f"‚Ä¢ –°–ª–µ–¥—É—é—â–∞—è —Ç–µ–º–∞: {next_topic.theme if next_topic else '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º'}")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–ø—Ç—ã
    print("\nüí¨ –ü–†–û–ú–ü–¢–´:")
    prompt_manager = PromptManager()
    content_prompt = await prompt_manager.get_prompt("content_generation")
    image_prompt = await prompt_manager.get_prompt("image")
    
    print(f"‚Ä¢ –ü—Ä–æ–º–ø—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if content_prompt else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    if content_prompt:
        print(f"  –î–ª–∏–Ω–∞: {len(content_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    print(f"‚Ä¢ –ü—Ä–æ–º–ø—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if image_prompt else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
    if image_prompt:
        print(f"  –î–ª–∏–Ω–∞: {len(image_prompt)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã
    print("\nüìã –ò–°–¢–û–†–ò–Ø –ü–û–°–¢–û–í:")
    total_posts = await count_posts()
    last_post_time = await get_last_post_time()
    
    print(f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {total_posts}")
    print(f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç: {last_post_time if last_post_time else '–ü–æ—Å—Ç–æ–≤ –Ω–µ—Ç'}")
    
    if last_post_time:
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞
        interval_minutes = int(interval_min)
        next_post_time = last_post_time + timedelta(minutes=interval_minutes)
        now = datetime.now()
        
        if next_post_time > now:
            time_diff = next_post_time - now
            hours_left = int(time_diff.total_seconds() // 3600)
            minutes_left = int((time_diff.total_seconds() % 3600) // 60)
            print(f"‚Ä¢ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞: {hours_left}—á {minutes_left}–º–∏–Ω")
        else:
            print("‚Ä¢ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞: ‚ö†Ô∏è –ì–û–¢–û–í –ö –ü–£–ë–õ–ò–ö–ê–¶–ò–ò!")
    
    # 6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–æ–≤
    recent_posts = await get_recent_posts(limit=3)
    if recent_posts:
        print(f"\nüìå –ü–û–°–õ–ï–î–ù–ò–ï {len(recent_posts)} –ü–û–°–¢–ê:")
        for i, post in enumerate(recent_posts, 1):
            print(f"  {i}. {post.topic[:40]}...")
            print(f"     –í—Ä–µ–º—è: {post.published_at}")
            print(f"     –¢–∏–ø: {post.post_type}")
            print(f"     TG: {'‚úÖ' if post.telegram_published else '‚ùå'}, VK: {'‚úÖ' if post.vk_published else '‚ùå'}")
    
    # 7. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    print("\nüñºÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô:")
    with_image_setting = await get_setting("autofeed_with_image", "off")
    image_style = await get_setting("autofeed_image_style", "fantasy")
    
    print(f"‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∞–≤—Ç–æ–ø–æ—Å—Ç–∞—Ö: {with_image_setting}")
    print(f"‚Ä¢ –°—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {image_style}")
    
    # 8. –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥—É
    print("\nüéØ –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò:")
    ready_for_autopost = True
    issues = []
    
    if auto_mode != "on":
        ready_for_autopost = False
        issues.append("–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤—ã–∫–ª—é—á–µ–Ω")
    
    if auto_enabled not in ["1", "true", "on"]:
        ready_for_autopost = False
        issues.append("–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    
    if not pub_settings.publish_to_tg and not pub_settings.publish_to_vk:
        ready_for_autopost = False
        issues.append("–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –Ω–∏ –æ–¥–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
    
    if unused_topics == 0:
        ready_for_autopost = False
        issues.append("–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –ø—É—Å—Ç")
    
    if not content_prompt:
        ready_for_autopost = False
        issues.append("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
    
    if ready_for_autopost:
        print("‚úÖ –í–°–ï –ì–û–¢–û–í–û –î–õ–Ø –ê–í–¢–û–ü–û–°–¢–ò–ù–ì–ê!")
    else:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–´ –° –ê–í–¢–û–ü–û–°–¢–ò–ù–ì–û–ú:")
        for issue in issues:
            print(f"  ‚Ä¢ {issue}")
    
    print("\n" + "=" * 50)
    return ready_for_autopost, issues

if __name__ == "__main__":
    asyncio.run(diagnose_autoposting()) 