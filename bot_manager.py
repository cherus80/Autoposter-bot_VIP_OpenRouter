#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Autoposter Bot
–ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∏ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
"""
import os
import sys
import signal
import subprocess
import time

def get_bot_pids():
    """–ü–æ–ª—É—á–∞–µ—Ç PID –≤—Å–µ—Ö –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ bot.py"""
    try:
        result = subprocess.run(['ps', 'aux'], capture_output=True, text=True)
        lines = result.stdout.split('\n')
        pids = []
        
        for line in lines:
            if 'bot.py' in line and 'grep' not in line:
                parts = line.split()
                if len(parts) > 1:
                    try:
                        pid = int(parts[1])
                        pids.append(pid)
                    except ValueError:
                        continue
        return pids
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è PID: {e}")
        return []

def status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    pids = get_bot_pids()
    
    if not pids:
        print("üî¥ –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
        return False
    elif len(pids) == 1:
        print(f"üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω (PID: {pids[0]})")
        return True
    else:
        print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(pids)} –∫–æ–ø–∏–π –±–æ—Ç–∞ (PID: {', '.join(map(str, pids))})")
        print("üîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –∫–æ–ø–∏–∏ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ")
        return True

def stop():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∫–æ–ø–∏–∏ –±–æ—Ç–∞"""
    pids = get_bot_pids()
    
    if not pids:
        print("‚ÑπÔ∏è –ë–æ—Ç —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
    
    print(f"üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é {len(pids)} –ø—Ä–æ—Ü–µ—Å—Å(–æ–≤)...")
    
    for pid in pids:
        try:
            os.kill(pid, signal.SIGTERM)
            print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {pid} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except ProcessLookupError:
            print(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å {pid} —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        except PermissionError:
            print(f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {pid}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {pid}: {e}")
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
    time.sleep(2)
    remaining_pids = get_bot_pids()
    
    if remaining_pids:
        print(f"‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ {len(remaining_pids)} –ø—Ä–æ—Ü–µ—Å—Å(–æ–≤)...")
        for pid in remaining_pids:
            try:
                os.kill(pid, signal.SIGKILL)
                print(f"üî• –ü—Ä–æ—Ü–µ—Å—Å {pid} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å {pid}: {e}")

def start():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ
    pids = get_bot_pids()
    if pids:
        print(f"‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω (PID: {', '.join(map(str, pids))})")
        choice = input("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ? (y/N): ")
        if choice.lower() in ['y', 'yes', '–¥', '–¥–∞']:
            stop()
            time.sleep(1)
        else:
            print("‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø—É—Å–∫–∞")
            return
    
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
        process = subprocess.Popen([sys.executable, 'bot.py'], 
                                 stdout=subprocess.DEVNULL, 
                                 stderr=subprocess.DEVNULL)
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º
        time.sleep(3)
        
        if process.poll() is None:  # –ü—Ä–æ—Ü–µ—Å—Å –≤—Å–µ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            print(f"‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
        else:
            print("‚ùå –ë–æ—Ç –Ω–µ —Å–º–æ–≥ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏:")
            print("python3 bot.py")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

def restart():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    stop()
    time.sleep(2)
    start()

def main():
    if len(sys.argv) < 2:
        print("ü§ñ –ú–µ–Ω–µ–¥–∂–µ—Ä Autoposter Bot")
        print("=" * 40)
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python3 bot_manager.py status   - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
        print("  python3 bot_manager.py start    - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
        print("  python3 bot_manager.py stop     - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞")
        print("  python3 bot_manager.py restart  - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
        return
    
    command = sys.argv[1].lower()
    
    if command == 'status':
        status()
    elif command == 'start':
        start()
    elif command == 'stop':
        stop()
    elif command == 'restart':
        restart()
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: status, start, stop, restart")

if __name__ == "__main__":
    main() 