"""
@file: utils/error_handler.py
@description: –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
@dependencies: config.py, logging
@created: 2025-01-21
"""

import logging
import traceback
import asyncio
from functools import wraps
from typing import Any, Callable, Optional, Dict, List
from datetime import datetime, timedelta

from aiogram import Bot
from aiogram.exceptions import TelegramAPIError

from config import ADMIN_IDS

logger = logging.getLogger(__name__)

class ErrorSeverity:
    """–£—Ä–æ–≤–Ω–∏ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –æ—à–∏–±–æ–∫"""
    LOW = "LOW"
    MEDIUM = "MEDIUM"
    HIGH = "HIGH"
    CRITICAL = "CRITICAL"

class ErrorHandler:
    """–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    
    def __init__(self, bot: Optional[Bot] = None):
        self.bot = bot
        self.error_counts = {}  # –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è rate limiting
        self.last_notification = {}  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
    async def handle_error(
        self,
        error: Exception,
        context: str = "Unknown",
        severity: str = ErrorSeverity.MEDIUM,
        user_id: Optional[int] = None,
        additional_info: Optional[Dict] = None
    ) -> None:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
        
        Args:
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏
            severity: –£—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
            additional_info: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        """
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        error_msg = f"[{severity}] {context}: {str(error)}"
        
        if severity == ErrorSeverity.CRITICAL:
            logger.critical(error_msg, exc_info=True)
        elif severity == ErrorSeverity.HIGH:
            logger.error(error_msg, exc_info=True)
        elif severity == ErrorSeverity.MEDIUM:
            logger.warning(error_msg)
        else:
            logger.info(error_msg)
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Å rate limiting)
        if severity in [ErrorSeverity.HIGH, ErrorSeverity.CRITICAL]:
            await self._notify_admin(error, context, severity, user_id, additional_info)
    
    async def _notify_admin(
        self,
        error: Exception,
        context: str,
        severity: str,
        user_id: Optional[int],
        additional_info: Optional[Dict]
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
        
        if not self.bot or not ADMIN_IDS:
            return
        
        # Rate limiting - –Ω–µ –±–æ–ª–µ–µ 1 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ 5 –º–∏–Ω—É—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
        error_key = f"{type(error).__name__}_{context}"
        now = datetime.now()
        
        if error_key in self.last_notification:
            if now - self.last_notification[error_key] < timedelta(minutes=5):
                return
        
        self.last_notification[error_key] = now
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        emoji = "üö®" if severity == ErrorSeverity.CRITICAL else "‚ö†Ô∏è"
        message = f"{emoji} <b>–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ</b>\n\n"
        message += f"<b>–£—Ä–æ–≤–µ–Ω—å:</b> {severity}\n"
        message += f"<b>–ö–æ–Ω—Ç–µ–∫—Å—Ç:</b> {context}\n"
        message += f"<b>–û—à–∏–±–∫–∞:</b> <code>{str(error)}</code>\n"
        
        if user_id:
            message += f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_id}\n"
        
        if additional_info:
            message += f"<b>–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
            for key, value in additional_info.items():
                message += f"‚Ä¢ {key}: {value}\n"
        
        message += f"<b>–í—Ä–µ–º—è:</b> {now.strftime('%Y-%m-%d %H:%M:%S')}"
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        for admin_id in ADMIN_IDS:
            try:
                await self.bot.send_message(admin_id, message, parse_mode="HTML", disable_web_page_preview=True)
            except TelegramAPIError as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
error_handler = ErrorHandler()

def init_error_handler(bot: Bot) -> None:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫ —Å –±–æ—Ç–æ–º"""
    global error_handler
    error_handler.bot = bot

def handle_errors(
    context: str = "Unknown",
    severity: str = ErrorSeverity.MEDIUM,
    fallback_return: Any = None,
    notify_user: bool = True
):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö
    
    Args:
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        severity: –£—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        fallback_return: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        notify_user: –£–≤–µ–¥–æ–º–ª—è—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
    """
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        async def wrapper(*args, **kwargs):
            try:
                return await func(*args, **kwargs)
            except Exception as e:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º user_id –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                user_id = None
                for arg in args:
                    if hasattr(arg, 'from_user') and hasattr(arg.from_user, 'id'):
                        user_id = arg.from_user.id
                        break
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
                await error_handler.handle_error(
                    error=e,
                    context=f"{func.__name__} ({context})",
                    severity=severity,
                    user_id=user_id,
                    additional_info={
                        "function": func.__name__,
                        "module": func.__module__
                    }
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if notify_user and user_id:
                    try:
                        # –ò—â–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                        message_obj = None
                        for arg in args:
                            if hasattr(arg, 'answer'):
                                message_obj = arg
                                break
                        
                        if message_obj:
                            if severity == ErrorSeverity.CRITICAL:
                                await message_obj.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.")
                            else:
                                await message_obj.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    except Exception:
                        pass  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
                
                return fallback_return
        
        return wrapper
    return decorator

class APIWrapper:
    """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –≤–Ω–µ—à–Ω–∏–º–∏ API"""
    
    @staticmethod
    async def safe_api_call(
        api_func: Callable,
        context: str,
        max_retries: int = 3,
        retry_delay: float = 1.0,
        fallback_value: Any = None,
        *args,
        **kwargs
    ) -> Any:
        """
        –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤—ã–∑–æ–≤ API —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        
        Args:
            api_func: –§—É–Ω–∫—Ü–∏—è API –¥–ª—è –≤—ã–∑–æ–≤–∞
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤—ã–∑–æ–≤–∞
            max_retries: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            retry_delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            fallback_value: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
            *args, **kwargs: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è API —Ñ—É–Ω–∫—Ü–∏–∏
        """
        
        for attempt in range(max_retries + 1):
            try:
                if asyncio.iscoroutinefunction(api_func):
                    return await api_func(*args, **kwargs)
                else:
                    return api_func(*args, **kwargs)
                    
            except Exception as e:
                is_last_attempt = attempt == max_retries
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
                if "rate limit" in str(e).lower():
                    severity = ErrorSeverity.LOW
                elif is_last_attempt:
                    severity = ErrorSeverity.HIGH
                else:
                    severity = ErrorSeverity.MEDIUM
                
                await error_handler.handle_error(
                    error=e,
                    context=f"{context} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries + 1})",
                    severity=severity,
                    additional_info={
                        "api_function": api_func.__name__ if hasattr(api_func, '__name__') else str(api_func),
                        "attempt": attempt + 1,
                        "max_retries": max_retries + 1
                    }
                )
                
                if is_last_attempt:
                    logger.error(f"API –≤—ã–∑–æ–≤ {context} –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –Ω–µ—É–¥–∞—á–µ–Ω –ø–æ—Å–ª–µ {max_retries + 1} –ø–æ–ø—ã—Ç–æ–∫")
                    return fallback_value
                
                # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                await asyncio.sleep(retry_delay * (2 ** attempt))
        
        return fallback_value

def graceful_degradation(fallback_function: Optional[Callable] = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è graceful degradation - –ø–ª–∞–≤–Ω–æ–π –¥–µ–≥—Ä–∞–¥–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    
    Args:
        fallback_function: –†–µ–∑–µ—Ä–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    def decorator(func: Callable) -> Callable:
        @wraps(func)
        async def wrapper(*args, **kwargs):
            try:
                return await func(*args, **kwargs)
            except Exception as e:
                await error_handler.handle_error(
                    error=e,
                    context=f"Graceful degradation in {func.__name__}",
                    severity=ErrorSeverity.MEDIUM
                )
                
                if fallback_function:
                    try:
                        if asyncio.iscoroutinefunction(fallback_function):
                            return await fallback_function(*args, **kwargs)
                        else:
                            return fallback_function(*args, **kwargs)
                    except Exception as fallback_error:
                        await error_handler.handle_error(
                            error=fallback_error,
                            context=f"Fallback function {fallback_function.__name__}",
                            severity=ErrorSeverity.HIGH
                        )
                
                return None
        
        return wrapper
    return decorator 