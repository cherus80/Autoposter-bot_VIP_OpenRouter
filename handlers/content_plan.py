"""
@file: handlers/content_plan.py
@description: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–º
@dependencies: managers/content_plan_manager.py
@created: 2025-01-20
"""

import logging
import json
import csv
import io
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton, Document

from managers.content_plan_manager import ContentPlanManager

logger = logging.getLogger(__name__)
router = Router()
content_manager = ContentPlanManager()

# FSM –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞
class UploadContentPlan(StatesGroup):
    waiting_for_file = State()

class ViewContentPlan(StatesGroup):
    viewing_all = State()
    viewing_unused = State() 
    viewing_used = State()
    selecting_topic = State()

@router.callback_query(F.data == "menu:upload_content_plan")
async def cb_upload_content_plan(cb: CallbackQuery, state: FSMContext):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞"""
    await state.set_state(UploadContentPlan.waiting_for_file)
    
    await cb.message.edit_text(
        f"üìÖ <b>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞</b>\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–º –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
        f"üìÑ <b>JSON:</b>\n"
        f"<code>[\n"
        f'  {{"category": "ai_news", "theme": "–¢–µ–º–∞ –ø–æ—Å—Ç–∞", "post_description": "–û–ø–∏—Å–∞–Ω–∏–µ"}},\n'
        f'  {{"category": "tutorials", "theme": "–¢–µ–º–∞ 2", "post_description": "–û–ø–∏—Å–∞–Ω–∏–µ 2"}}\n'
        f"]</code>\n\n"
        f"üìä <b>CSV:</b>\n"
        f"<code>category,theme,post_description\n"
        f"ai_news,–¢–µ–º–∞ –ø–æ—Å—Ç–∞,–û–ø–∏—Å–∞–Ω–∏–µ\n"
        f"tutorials,–¢–µ–º–∞ 2,–û–ø–∏—Å–∞–Ω–∏–µ 2</code>\n\n"
        f"üí° <b>–ü–æ–ª—è:</b>\n"
        f"‚Ä¢ category - –∫–∞—Ç–µ–≥–æ—Ä–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)\n"
        f"‚Ä¢ theme - —Ç–µ–º–∞ –ø–æ—Å—Ç–∞ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)\n"
        f"‚Ä¢ post_description - –æ–ø–∏—Å–∞–Ω–∏–µ/–¥–µ—Ç–∞–ª–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä", callback_data="content:example")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="content:cancel")]
            ]
        )
    )
    await cb.answer()

@router.message(UploadContentPlan.waiting_for_file, F.document)
async def process_content_file(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–º"""
    document: Document = msg.document
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 5MB)
    if document.file_size > 5 * 1024 * 1024:
        await msg.answer("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π! –ú–∞–∫—Å–∏–º—É–º 5MB.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    filename = document.file_name.lower()
    if not (filename.endswith('.json') or filename.endswith('.csv')):
        await msg.answer("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã .json –∏ .csv")
        return
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await msg.bot.get_file(document.file_id)
        file_content = await msg.bot.download_file(file.file_path)
        
        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        content_text = file_content.read().decode('utf-8')
        
        # –ü–∞—Ä—Å–∏–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
        if filename.endswith('.json'):
            content_items = await parse_json_content(content_text)
        else:  # CSV
            content_items = await parse_csv_content(content_text)
        
        if not content_items:
            await msg.answer("‚ùå –§–∞–π–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω
        success_count = await content_manager.add_content_items(content_items)
        
        await msg.answer(
            f"‚úÖ <b>–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –∑–∞–≥—Ä—É–∂–µ–Ω!</b>\n\n"
            f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(content_items)} —Ç–µ–º\n"
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {success_count} –Ω–æ–≤—ã—Ö —Ç–µ–º\n"
            f"üîÑ –ü—Ä–æ–ø—É—â–µ–Ω–æ: {len(content_items) - success_count} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω", callback_data="content:show")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
                ]
            )
        )
        
        logger.info(f"–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –∑–∞–≥—Ä—É–∂–µ–Ω: {success_count} –Ω–æ–≤—ã—Ö —Ç–µ–º –∏–∑ {len(content_items)}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞: {e}")
        await msg.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
    
    await state.clear()

@router.message(UploadContentPlan.waiting_for_file, ~F.document)
async def process_invalid_content(msg: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await msg.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (.json –∏–ª–∏ .csv)")

async def parse_json_content(content_text: str) -> list:
    """–ü–∞—Ä—Å–∏–Ω–≥ JSON –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞"""
    try:
        data = json.loads(content_text)
        
        if not isinstance(data, list):
            raise ValueError("JSON –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤")
        
        content_items = []
        for item in data:
            if not isinstance(item, dict) or 'theme' not in item:
                continue
            
            content_items.append({
                'category': item.get('category', ''),
                'theme': item['theme'],
                'post_description': item.get('post_description', '')
            })
        
        return content_items
        
    except json.JSONDecodeError as e:
        raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON: {e}")

async def parse_csv_content(content_text: str) -> list:
    """–ü–∞—Ä—Å–∏–Ω–≥ CSV –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞"""
    try:
        csv_reader = csv.DictReader(io.StringIO(content_text))
        content_items = []
        
        for row in csv_reader:
            if 'theme' not in row or not row['theme'].strip():
                continue
            
            content_items.append({
                'category': row.get('category', '').strip(),
                'theme': row['theme'].strip(),
                'post_description': row.get('post_description', '').strip()
            })
        
        return content_items
        
    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV: {e}")

@router.callback_query(F.data == "content:example")
async def cb_content_example(cb: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–æ–≤"""
    example_text = f"""üìã <b>–ü—Ä–∏–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞</b>

 üóÇÔ∏è <b>JSON –ø—Ä–∏–º–µ—Ä (content_plan.json):</b>
 <code>[
   {{
     "category": "ai_tools",
     "theme": "5 –ª—É—á—à–∏—Ö AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã",
     "post_description": "–û–±–∑–æ—Ä –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏"
   }},
   {{
     "category": "tutorials",
     "theme": "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å ChatGPT –¥–ª—è –±–∏–∑–Ω–µ—Å–∞",
     "post_description": "–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
   }},
   {{
     "category": "automation",
     "theme": "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–æ—Ü—Å–µ—Ç–µ–π",
     "post_description": "–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏"
   }}
 ]</code>

 üìä <b>CSV –ø—Ä–∏–º–µ—Ä (content_plan.csv):</b>
 <code>category,theme,post_description
 "ai_tools","5 –ª—É—á—à–∏—Ö AI –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã","–û–±–∑–æ—Ä –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤"
 "tutorials","–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å ChatGPT –¥–ª—è –±–∏–∑–Ω–µ—Å–∞","–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"
 "automation","–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–æ—Ü—Å–µ—Ç–µ–π","–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã"</code>"""

    await cb.message.answer(
        example_text,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu:upload_content_plan")]]
        )
    )
    await cb.answer()

@router.callback_query(F.data == "content:show")
async def cb_show_content_plan(cb: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞"""
    unused_count = await content_manager.count_unused_items()
    used_count = await content_manager.count_used_items()
    total_count = await content_manager.count_all_items()
    
    if total_count == 0:
        await cb.message.edit_text(
            "üìÖ <b>–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –ø—É—Å—Ç</b>\n\n"
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å —Ç–µ–º–∞–º–∏ –¥–ª—è –ø–æ—Å—Ç–æ–≤.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞–Ω", callback_data="menu:upload_content_plan")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
                ]
            )
        )
        return
    
    plan_text = f"üìÖ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–º</b>\n\n"
    plan_text += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
    plan_text += f"‚Ä¢ –í—Å–µ–≥–æ —Ç–µ–º: {total_count}\n"
    plan_text += f"‚Ä¢ –ù–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö: {unused_count}\n"
    plan_text += f"‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö: {used_count}\n\n"
    plan_text += f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    keyboard = [
        [InlineKeyboardButton(text=f"üìã –í—Å–µ —Ç–µ–º—ã ({total_count})", callback_data="content:view_all")],
        [InlineKeyboardButton(text=f"üîÑ –ù–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ ({unused_count})", callback_data="content:view_unused")],
        [InlineKeyboardButton(text=f"‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ ({used_count})", callback_data="content:view_used")],
        [InlineKeyboardButton(text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ø–ª–∞–Ω", callback_data="content:clear")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ]
    
    await cb.message.edit_text(
        plan_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await cb.answer()

@router.callback_query(F.data == "content:clear")
async def cb_clear_content_plan(cb: CallbackQuery):
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
    total_count = await content_manager.count_all_items()
    unused_count = await content_manager.count_unused_items()
    
    await cb.message.edit_text(
        f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏</b>\n\n"
        f"‚ùå <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.\n\n"
        f"üìä <b>–ë—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ:</b>\n"
        f"‚Ä¢ –í—Å–µ–≥–æ —Ç–µ–º: <b>{total_count}</b>\n"
        f"‚Ä¢ –ù–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö: <b>{unused_count}</b>\n"
        f"‚Ä¢ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö: <b>{total_count - unused_count}</b>\n\n"
        f"üóëÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ <b>–±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–∏—Ç—å</b> –≤—Å–µ —Ç–µ–º—ã –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞?\n\n"
        f"üí° <i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–¥–µ–ª–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π.</i>",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ö†Ô∏è –î–∞, —É–¥–∞–ª–∏—Ç—å –í–°–ï", callback_data="content:confirm_clear")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="content:show")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
        )
    )
    await cb.answer()

@router.callback_query(F.data == "content:confirm_clear")
async def cb_confirm_clear_content_plan(cb: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞"""
    try:
        total_deleted = await content_manager.clear_all_items()
        
        await cb.message.edit_text(
            f"‚úÖ <b>–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –æ—á–∏—â–µ–Ω</b>\n\n"
            f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Ç–µ–º: <b>{total_deleted}</b>\n"
            f"üìÇ –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç–æ–π.\n\n"
            f"üí° <i>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞–Ω –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.</i>",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞–Ω", callback_data="menu:upload_content_plan")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                ]
            )
        )
        await cb.answer("‚úÖ –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –æ—á–∏—â–µ–Ω!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞: {e}")
        await cb.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ</b>\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
            f"üîß <i>–ö–æ–¥ –æ—à–∏–±–∫–∏: {str(e)[:50]}...</i>",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="content:clear")],
                    [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
                ]
            )
        )
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ")

@router.callback_query(F.data == "content:view_all")
async def cb_view_all_topics(cb: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Ç–µ–º"""
    await state.set_state(ViewContentPlan.viewing_all)
    await show_topics_page(cb, "all", 0)

@router.callback_query(F.data == "content:view_unused")
async def cb_view_unused_topics(cb: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–º"""
    await state.set_state(ViewContentPlan.viewing_unused)
    await show_topics_page(cb, "unused", 0)

@router.callback_query(F.data == "content:view_used")
async def cb_view_used_topics(cb: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–º"""
    await state.set_state(ViewContentPlan.viewing_used)
    await show_topics_page(cb, "used", 0)

async def show_topics_page(cb: CallbackQuery, topic_type: str, page: int):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ç–µ–º–∞–º–∏"""
    limit = 5
    offset = page * limit
    
    if topic_type == "all":
        items = await content_manager.get_all_items(limit=limit, offset=offset)
        total_count = await content_manager.count_all_items()
        title = "üìã –í—Å–µ —Ç–µ–º—ã"
    elif topic_type == "unused":
        items = await content_manager.get_unused_items(limit=limit, offset=offset)
        total_count = await content_manager.count_unused_items()
        title = "üîÑ –ù–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–º—ã"
    else:  # used
        items = await content_manager.get_used_items(limit=limit, offset=offset)
        total_count = await content_manager.count_used_items()
        title = "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–º—ã"
    
    if not items:
        text = f"{title}\n\n–¢–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        keyboard = [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="content:show")]]
    else:
        text = f"{title} (—Å—Ç—Ä. {page + 1})\n\n"
        
        for i, item in enumerate(items, 1):
            status_icon = "‚úÖ" if item.used else "üîÑ"
            category_icon = "üìÇ" if item.category else "üìù"
            text += f"{status_icon} {category_icon} <b>{item.theme}</b>\n"
            if item.category:
                text += f"   üè∑Ô∏è <i>{item.category}</i>\n"
            if item.post_description:
                desc = item.post_description[:80] + "..." if len(item.post_description) > 80 else item.post_description
                text += f"   üí≠ <i>{desc}</i>\n"
            
            # –ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
            action_text = "üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" if item.used else "‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–µ–µ"
            text += f"   üëÜ /{item.id} - {action_text}\n\n"
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        keyboard = []
        nav_row = []
        if page > 0:
            nav_row.append(InlineKeyboardButton(text="‚óÄÔ∏è –ü—Ä–µ–¥", callback_data=f"content:page_{topic_type}_{page-1}"))
        if (page + 1) * limit < total_count:
            nav_row.append(InlineKeyboardButton(text="–°–ª–µ–¥ ‚ñ∂Ô∏è", callback_data=f"content:page_{topic_type}_{page+1}"))
        
        if nav_row:
            keyboard.append(nav_row)
        
        keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="content:show")])
        
        text += f"\nüí° <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ /{'{'}ID{'}'} –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–µ–º–æ–π</i>"
    
    await cb.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
    )
    await cb.answer()

@router.callback_query(F.data.startswith("content:page_"))
async def cb_content_page(cb: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
    # –§–æ—Ä–º–∞—Ç: content:page_topic_type_page_number
    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "content:page_" –∏ —Ä–∞–∑–¥–µ–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫
    data_parts = cb.data[13:]  # –£–±–∏—Ä–∞–µ–º "content:page_"
    parts = data_parts.rsplit("_", 1)  # –†–∞–∑–¥–µ–ª—è–µ–º —Å –∫–æ–Ω—Ü–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å topic_type –∏ page
    
    if len(parts) != 2:
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
        return
    
    topic_type, page_str = parts
    try:
        page = int(page_str)
        await show_topics_page(cb, topic_type, page)
    except ValueError:
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")

@router.message(ViewContentPlan.viewing_all, F.text.startswith("/"))
@router.message(ViewContentPlan.viewing_unused, F.text.startswith("/"))
@router.message(ViewContentPlan.viewing_used, F.text.startswith("/"))
async def process_topic_command(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–º–∞–º–∏"""
    try:
        topic_id = int(msg.text[1:])  # –£–±–∏—Ä–∞–µ–º "/"
        topic = await content_manager.get_topic_by_id(topic_id)
        
        if not topic:
            await msg.answer("‚ùå –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        status_text = "‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞" if topic.used else "üîÑ –ù–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞"
        
        text = f"üìã <b>–î–µ—Ç–∞–ª–∏ —Ç–µ–º—ã #{topic.id}</b>\n\n"
        text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
        if topic.category:
            text += f"üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {topic.category}\n"
        text += f"üìù <b>–¢–µ–º–∞:</b> {topic.theme}\n"
        if topic.post_description:
            text += f"üí≠ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {topic.post_description}\n"
        
        keyboard = []
        if topic.used:
            keyboard.append([InlineKeyboardButton(text="üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–º—É", callback_data=f"content:restore_{topic.id}")])
        
        keyboard.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="content:back_to_list")])
        
        await msg.answer(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard)
        )
        
    except ValueError:
        await msg.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /123")

@router.callback_query(F.data.startswith("content:restore_"))
async def cb_restore_topic(cb: CallbackQuery):
    """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–º—ã"""
    topic_id = int(cb.data.split("_")[2])
    
    success = await content_manager.restore_topic(topic_id)
    
    if success:
        await cb.answer("‚úÖ –¢–µ–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        topic = await content_manager.get_topic_by_id(topic_id)
        
        text = f"üìã <b>–¢–µ–º–∞ #{topic.id} –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>\n\n"
        text += f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> üîÑ –ù–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞\n"
        if topic.category:
            text += f"üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {topic.category}\n"
        text += f"üìù <b>–¢–µ–º–∞:</b> {topic.theme}\n"
        if topic.post_description:
            text += f"üí≠ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {topic.post_description}\n"
        
        await cb.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="content:back_to_list")]]
            )
        )
    else:
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")

@router.callback_query(F.data == "content:back_to_list")
async def cb_back_to_list(cb: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Ç–µ–º"""
    current_state = await state.get_state()
    
    if current_state == ViewContentPlan.viewing_all.state:
        await show_topics_page(cb, "all", 0)
    elif current_state == ViewContentPlan.viewing_unused.state:
        await show_topics_page(cb, "unused", 0) 
    elif current_state == ViewContentPlan.viewing_used.state:
        await show_topics_page(cb, "used", 0)
    else:
        await cb_show_content_plan(cb)

@router.callback_query(F.data == "content:cancel")
async def cb_content_cancel(cb: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞"""
    await state.clear()
    await cb.answer("‚ùå –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    from handlers.menu import build_main_menu_keyboard
    await cb.message.edit_text(
        "ü§ñ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=build_main_menu_keyboard()
    ) 