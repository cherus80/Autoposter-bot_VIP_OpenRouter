"""
@file: handlers/backup.py
@description: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º
@dependencies: aiogram, backup_service, backup_scheduler
@created: 2025-01-21
"""

import asyncio
import logging
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, Any

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

from services.backup_service import backup_service, create_backup, restore_backup, get_backups, create_project_export
from services.backup_scheduler import backup_scheduler
from utils.error_handler import error_handler, ErrorSeverity

logger = logging.getLogger(__name__)
router = Router()


class BackupStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    waiting_for_interval = State()
    waiting_for_max_backups = State()
    waiting_for_backup_file = State()


def build_backup_main_menu() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    builder.button(text="üìä –°—Ç–∞—Ç—É—Å –±—ç–∫–∞–ø–æ–≤", callback_data="backup:status")
    builder.button(text="üíæ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø", callback_data="backup:create")
    builder.adjust(2)
    
    builder.button(text="üìã –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤", callback_data="backup:list")
    builder.button(text="üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="backup:restore_menu")
    builder.adjust(2)
    
    # –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞  
    builder.button(text="üì¶ –≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞", callback_data="backup:export_project")
    builder.adjust(1)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    builder.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="backup:settings")
    builder.adjust(1)
    
    # –ù–∞–∑–∞–¥
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    builder.adjust(1)
    
    return builder.as_markup()


def build_backup_settings_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    builder = InlineKeyboardBuilder()
    
    builder.button(text="üîÑ –í–∫–ª—é—á–∏—Ç—å/–í—ã–∫–ª—é—á–∏—Ç—å", callback_data="backup_settings:toggle_enabled")
    builder.button(text="‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="backup_settings:set_interval")
    builder.adjust(2)
    
    builder.button(text="üì¶ –ú–∞–∫—Å. –±—ç–∫–∞–ø–æ–≤", callback_data="backup_settings:set_max_backups")
    builder.button(text="üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data="backup_settings:toggle_notifications")
    builder.adjust(2)
    
    builder.button(text="üóúÔ∏è –°–∂–∞—Ç–∏–µ", callback_data="backup_settings:toggle_compression")
    builder.button(text="üìÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="backup_settings:toggle_settings_backup")
    builder.adjust(2)
    
    builder.button(text="üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", callback_data="backup_settings:toggle_db_backup")
    builder.adjust(1)
    
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="backup:main")
    builder.adjust(1)
    
    return builder.as_markup()


async def build_backup_list_menu(backups: list, page: int = 0, page_size: int = 5) -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    builder = InlineKeyboardBuilder()
    
    start_idx = page * page_size
    end_idx = min(start_idx + page_size, len(backups))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –±—ç–∫–∞–ø–æ–≤
    for i in range(start_idx, end_idx):
        backup = backups[i]
        created = await format_time_with_timezone(backup["created"])
        created_short = created[0:5] + " " + created[11:16]  # DD.MM HH:MM
        size = format_file_size(backup["size"])
        text = f"{created_short} | {backup['type']} | {size}"
        builder.button(text=text, callback_data=f"backup:detail:{i}")
        builder.adjust(1)
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    nav_buttons = []
    if page > 0:
        nav_buttons.append(("‚óÄÔ∏è –ü—Ä–µ–¥", f"backup:list:{page-1}"))
    if end_idx < len(backups):
        nav_buttons.append(("–°–ª–µ–¥ ‚ñ∂Ô∏è", f"backup:list:{page+1}"))
    
    if nav_buttons:
        for text, callback in nav_buttons:
            builder.button(text=text, callback_data=callback)
        builder.adjust(len(nav_buttons))
    
    # –ù–∞–∑–∞–¥
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="backup:main")
    builder.adjust(1)
    
    return builder.as_markup()


def build_backup_detail_menu(backup_idx: int) -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é –¥–µ—Ç–∞–ª–µ–π —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    builder = InlineKeyboardBuilder()
    
    builder.button(text="üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"backup:restore:{backup_idx}")
    builder.button(text="üì• –°–∫–∞—á–∞—Ç—å", callback_data=f"backup:download:{backup_idx}")
    builder.adjust(2)
    
    builder.button(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"backup:delete:{backup_idx}")
    builder.adjust(1)
    
    builder.button(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="backup:list")
    builder.adjust(1)
    
    return builder.as_markup()


def format_file_size(size_bytes: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞"""
    for unit in ['–ë', '–ö–ë', '–ú–ë', '–ì–ë']:
        if size_bytes < 1024:
            return f"{size_bytes:.1f} {unit}"
        size_bytes /= 1024
    return f"{size_bytes:.1f} –¢–ë"


async def format_time_with_timezone(dt: datetime) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        from database.settings_db import get_setting
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_timezone = await get_setting("user_timezone", "+3")
        
        # –ü–∞—Ä—Å–∏–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        if user_timezone.startswith('+'):
            tz_offset = int(user_timezone[1:])
        elif user_timezone.startswith('-'):
            tz_offset = -int(user_timezone[1:])
        else:
            tz_offset = 3  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é +3
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        adjusted_time = dt + timedelta(hours=tz_offset)
        
        return adjusted_time.strftime("%d.%m.%Y %H:%M:%S")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return dt.strftime("%d.%m.%Y %H:%M:%S")


@router.callback_query(F.data == "backup:main")
async def backup_main_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
    await callback.message.edit_text(
        "üíæ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ, "
        "—Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä—É—á–Ω—ã–µ –±—ç–∫–∞–ø—ã –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ø–∏–π.",
        reply_markup=build_backup_main_menu()
    )


@router.callback_query(F.data == "backup:status")
async def backup_status(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        status = await backup_scheduler.get_backup_status()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
        current_time = await format_time_with_timezone(datetime.now())
        
        if "error" in status:
            text = (
                f"‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞</b>\n\n{status['error']}\n\n"
                f"üîÑ <i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}</i>"
            )
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            enabled_emoji = "‚úÖ" if status.get("backup_enabled", False) else "‚ùå"
            scheduler_emoji = "üü¢" if status.get("scheduler_running", False) else "üî¥"
            
            text = (
                f"üìä <b>–°—Ç–∞—Ç—É—Å —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
                f"{enabled_emoji} <b>–°—Ç–∞—Ç—É—Å:</b> {'–í–∫–ª—é—á–µ–Ω–æ' if status.get('backup_enabled') else '–û—Ç–∫–ª—é—á–µ–Ω–æ'}\n"
                f"{scheduler_emoji} <b>–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫:</b> {'–†–∞–±–æ—Ç–∞–µ—Ç' if status.get('scheduler_running') else '–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}\n"
                f"‚è∞ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</b> {status.get('backup_interval_hours', '–ù/–î')} —á–∞—Å–æ–≤\n"
                f"üì¶ <b>–ú–∞–∫—Å. –±—ç–∫–∞–ø–æ–≤:</b> {status.get('max_backups', '–ù/–î')}\n"
                f"üíæ <b>–í—Å–µ–≥–æ –±—ç–∫–∞–ø–æ–≤:</b> {status.get('total_backups', 0)}\n"
            )
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø
            last_backup = status.get("last_backup")
            if last_backup:
                time_str = await format_time_with_timezone(last_backup["created"])
                text += f"üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø:</b> {time_str}\n"
                text += f"üìÅ <b>–¢–∏–ø:</b> {last_backup['type']}\n"
                text += f"üíæ <b>–†–∞–∑–º–µ—Ä:</b> {format_file_size(last_backup['size'])}\n"
            else:
                text += "üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π –±—ç–∫–∞–ø:</b> –ù–µ –Ω–∞–π–¥–µ–Ω\n"
            
            # –°–ª–µ–¥—É—é—â–∏–π –±—ç–∫–∞–ø
            next_backup = status.get("next_backup_in_hours")
            if next_backup is not None:
                if next_backup == 0:
                    text += "‚è≥ <b>–°–ª–µ–¥—É—é—â–∏–π –±—ç–∫–∞–ø:</b> –°–µ–π—á–∞—Å\n"
                else:
                    text += f"‚è≥ <b>–°–ª–µ–¥—É—é—â–∏–π –±—ç–∫–∞–ø:</b> —á–µ—Ä–µ–∑ {next_backup} —á.\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            text += f"\nüîÑ <i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}</i>"
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="backup:status")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="backup:main")
        builder.adjust(2)
        
        try:
            await callback.message.edit_text(text, reply_markup=builder.as_markup())
        except Exception as edit_error:
            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            if "message is not modified" in str(edit_error):
                logger.debug("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
            else:
                # –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                raise edit_error
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±—ç–∫–∞–ø–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞", show_alert=True)


@router.callback_query(F.data == "backup:create")
async def backup_create(callback: CallbackQuery):
    """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"""
    try:
        await callback.message.edit_text(
            "‚è≥ <b>–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        )
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_path = await backup_scheduler.force_backup()
        
        if backup_path:
            backup_name = Path(backup_path).name
            size = format_file_size(Path(backup_path).stat().st_size)
            
            text = (
                "‚úÖ <b>–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                f"üìÅ <b>–§–∞–π–ª:</b> <code>{backup_name}</code>\n"
                f"üíæ <b>–†–∞–∑–º–µ—Ä:</b> {size}\n"
                f"üïê <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}"
            )
        else:
            text = (
                "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏!</b>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
            )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
        builder.adjust(1)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏!</b>\n\n"
            f"–î–µ—Ç–∞–ª–∏: <code>{str(e)}</code>",
            reply_markup=InlineKeyboardBuilder().button(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="backup:main"
            ).as_markup()
        )
        await callback.answer()


@router.callback_query(F.data.startswith("backup:list"))
async def backup_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π"""
    try:
        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ callback_data
        parts = callback.data.split(":")
        page = int(parts[2]) if len(parts) > 2 else 0
        
        backups = await get_backups()
        
        if not backups:
            text = (
                "üì¶ <b>–°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π</b>\n\n"
                "‚ùå –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É '–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø'."
            )
            builder = InlineKeyboardBuilder()
            builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="backup:main")
            markup = builder.as_markup()
        else:
            total_size = sum(backup["size"] for backup in backups)
            text = (
                f"üì¶ <b>–°–ø–∏—Å–æ–∫ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π</b>\n\n"
                f"üíæ <b>–í—Å–µ–≥–æ:</b> {len(backups)} —Ñ–∞–π–ª–æ–≤\n"
                f"üìä <b>–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:</b> {format_file_size(total_size)}\n\n"
                f"<i>–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:</i>"
            )
            markup = await build_backup_list_menu(backups, page)
        
        await callback.message.edit_text(text, reply_markup=markup)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±—ç–∫–∞–ø–æ–≤: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("backup:detail:"))
async def backup_detail(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    try:
        backup_idx = int(callback.data.split(":")[2])
        backups = await get_backups()
        
        if backup_idx >= len(backups):
            await callback.answer("‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        backup = backups[backup_idx]
        
        formatted_time = await format_time_with_timezone(backup['created'])
        text = (
            f"üìã <b>–î–µ—Ç–∞–ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏</b>\n\n"
            f"üìÅ <b>–ò–º—è —Ñ–∞–π–ª–∞:</b> <code>{backup['name']}</code>\n"
            f"üìä <b>–¢–∏–ø:</b> {backup['type']}\n"
            f"üíæ <b>–†–∞–∑–º–µ—Ä:</b> {format_file_size(backup['size'])}\n"
            f"üïê <b>–°–æ–∑–¥–∞–Ω:</b> {formatted_time}\n"
            f"üìÇ <b>–ü—É—Ç—å:</b> <code>{backup['path']}</code>"
        )
        
        await callback.message.edit_text(
            text, 
            reply_markup=build_backup_detail_menu(backup_idx)
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –±—ç–∫–∞–ø–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π", show_alert=True)


@router.callback_query(F.data.startswith("backup:download:"))
async def backup_download(callback: CallbackQuery):
    """–°–∫–∞—á–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é"""
    try:
        backup_idx = int(callback.data.split(":")[2])
        backups = await get_backups()
        
        if backup_idx >= len(backups):
            await callback.answer("‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        backup = backups[backup_idx]
        backup_path = Path(backup["path"])
        
        if not backup_path.exists():
            await callback.answer("‚ùå –§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram - 50MB)
        if backup["size"] > 50 * 1024 * 1024:
            await callback.answer(
                "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–µ–∑ Telegram (>50MB)", 
                show_alert=True
            )
            return
        
        await callback.message.edit_text("‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...")
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        with open(backup_path, 'rb') as file:
            file_data = file.read()
        
        document = BufferedInputFile(file_data, filename=backup["name"])
        
        formatted_time = await format_time_with_timezone(backup['created'])
        await callback.message.answer_document(
            document,
            caption=f"üì¶ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup['name']}\n"
                   f"üìä –†–∞–∑–º–µ—Ä: {format_file_size(backup['size'])}\n"
                   f"üïê –°–æ–∑–¥–∞–Ω–∞: {formatted_time}"
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ—Ç–∞–ª—è–º
        await backup_detail(callback)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞", show_alert=True)


@router.callback_query(F.data == "backup:restore_menu")
async def backup_restore_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)"""
    try:
        await callback.answer()
        
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        backups = await get_backups()
        
        if not backups:
            await callback.message.edit_text(
                "üìã <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
                "‚ùå –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                "–°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –ø–µ—Ä–µ–¥ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[
                        InlineKeyboardButton(text="üíæ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø", callback_data="backup:create"),
                        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="backup:main")
                    ]]
                )
            )
            return
        
        text = (
            "üîÑ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:\n"
            "‚ö†Ô∏è <i>–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã!</i>\n\n"
            f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: {len(backups)}"
        )
        
        await callback.message.edit_text(text, reply_markup=await build_backup_list_menu(backups))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –º–µ–Ω—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("backup:restore:"))
async def backup_restore_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    try:
        backup_idx = int(callback.data.split(":")[2])
        backups = await get_backups()
        
        if backup_idx >= len(backups):
            await callback.answer("‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        backup = backups[backup_idx]
        
        formatted_time = await format_time_with_timezone(backup['created'])
        text = (
            "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï! –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏:\n"
            f"üìÅ <b>–§–∞–π–ª:</b> {backup['name']}\n"
            f"üïê <b>–°–æ–∑–¥–∞–Ω:</b> {formatted_time}\n\n"
            f"üö® <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–º–µ–Ω–∏—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ!</b>\n"
            f"–¢–µ–∫—É—â–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è.\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ?"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –î–∞, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"backup:restore_confirm:{backup_idx}")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"backup:detail:{backup_idx}")
        builder.adjust(2)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("backup:restore_confirm:"))
async def backup_restore_execute(callback: CallbackQuery):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    try:
        backup_idx = int(callback.data.split(":")[2])
        backups = await get_backups()
        
        if backup_idx >= len(backups):
            await callback.answer("‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        backup = backups[backup_idx]
        
        await callback.message.edit_text(
            "‚è≥ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.\n"
            "–ù–ï –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–π—Ç–µ –±–æ—Ç–∞ –≤–æ –≤—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è!"
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
        success = await restore_backup(backup["path"])
        
        if success:
            current_time = await format_time_with_timezone(datetime.now())
            text = (
                "‚úÖ <b>–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                f"üìÅ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–∑: {backup['name']}\n"
                f"üïê –í—Ä–µ–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {current_time}\n\n"
                f"‚ö†Ô∏è <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π.</b>"
            )
        else:
            text = (
                "‚ùå <b>–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è!</b>\n\n"
                "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n"
                "–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π."
            )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="backup:list")
        builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main")
        builder.adjust(2)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
        await callback.message.edit_text(
            f"‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è!</b>\n\n"
            f"–î–µ—Ç–∞–ª–∏: <code>{str(e)}</code>\n\n"
            f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardBuilder().button(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="backup:main"
            ).as_markup()
        )
        await callback.answer()


@router.callback_query(F.data.startswith("backup:delete:"))
async def backup_delete_confirm(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    try:
        backup_idx = int(callback.data.split(":")[2])
        backups = await get_backups()
        
        if backup_idx >= len(backups):
            await callback.answer("‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        backup = backups[backup_idx]
        formatted_time = await format_time_with_timezone(backup['created'])
        
        text = (
            "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï! –£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏</b>\n\n"
            f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é:\n"
            f"üìÅ <b>–§–∞–π–ª:</b> {backup['name']}\n"
            f"üìä <b>–¢–∏–ø:</b> {backup['type']}\n"
            f"üïê <b>–°–æ–∑–¥–∞–Ω:</b> {formatted_time}\n"
            f"üíæ <b>–†–∞–∑–º–µ—Ä:</b> {format_file_size(backup['size'])}\n\n"
            f"üö® <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!</b>\n"
            f"–£–¥–∞–ª–µ–Ω–Ω—É—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.\n\n"
            f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ?"
        )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="üóëÔ∏è –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"backup:delete_confirm:{backup_idx}")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"backup:detail:{backup_idx}")
        builder.adjust(2)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("backup:delete_confirm:"))
async def backup_delete_execute(callback: CallbackQuery):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    try:
        backup_idx = int(callback.data.split(":")[2])
        backups = await get_backups()
        
        if backup_idx >= len(backups):
            await callback.answer("‚ùå –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        backup = backups[backup_idx]
        
        await callback.message.edit_text(
            "‚è≥ <b>–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
        )
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
        from services.backup_service import delete_backup
        success = await delete_backup(backup["path"])
        
        if success:
            current_time = await format_time_with_timezone(datetime.now())
            text = (
                "‚úÖ <b>–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                f"üìÅ –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {backup['name']}\n"
                f"üíæ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–æ –º–µ—Å—Ç–∞: {format_file_size(backup['size'])}\n"
                f"üïê –í—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è: {current_time}"
            )
        else:
            text = (
                "‚ùå <b>–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è!</b>\n\n"
                "–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.\n"
                "–§–∞–π–ª –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π."
            )
        
        builder = InlineKeyboardBuilder()
        builder.button(text="‚óÄÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data="backup:list")
        builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:main")
        builder.adjust(2)
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await callback.message.edit_text(
            f"‚ùå <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è!</b>\n\n"
            f"–î–µ—Ç–∞–ª–∏: <code>{str(e)}</code>\n\n"
            f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardBuilder().button(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="backup:main"
            ).as_markup()
        )
        await callback.answer()


@router.callback_query(F.data == "backup:settings")
async def backup_settings_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        await callback.answer()  # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π
        
        settings = await backup_service.get_backup_settings()
        
        enabled = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if settings.get("backup_enabled") else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ"
        notifications = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if settings.get("notify_admin") else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"
        compression = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if settings.get("compress_backups") else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ"
        db_backup = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if settings.get("backup_database") else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ"
        settings_backup = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if settings.get("backup_settings") else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ"
        
        text = (
            f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
            f"üîÑ <b>–ê–≤—Ç–æ–±—ç–∫–∞–ø:</b> {enabled}\n"
            f"‚è∞ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</b> {settings.get('backup_interval_hours', 24)} —á–∞—Å–æ–≤\n"
            f"üì¶ <b>–ú–∞–∫—Å. –±—ç–∫–∞–ø–æ–≤:</b> {settings.get('max_backups', 7)}\n"
            f"üìß <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {notifications}\n"
            f"üóúÔ∏è <b>–°–∂–∞—Ç–∏–µ:</b> {compression}\n"
            f"üíæ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> {db_backup}\n"
            f"üìÑ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b> {settings_backup}\n\n"
            f"<i>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:</i>"
        )
        
        await callback.message.edit_text(text, reply_markup=build_backup_settings_menu())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±—ç–∫–∞–ø–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)


@router.callback_query(F.data.startswith("backup_settings:toggle_"))
async def backup_settings_toggle(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å boolean –Ω–∞—Å—Ç—Ä–æ–π–∫—É"""
    try:
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞–∂–∞—Ç–∏—è
        await callback.answer()
        
        setting_name = callback.data.split(":")[-1].replace("toggle_", "")
        
        # –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π
        setting_map = {
            "enabled": "backup_enabled",
            "notifications": "notify_admin", 
            "compression": "compress_backups",
            "db_backup": "backup_database",
            "settings_backup": "backup_settings"
        }
        
        if setting_name not in setting_map:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: {setting_name}")
            return
        
        actual_setting = setting_map[setting_name]
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings = await backup_service.get_backup_settings()
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        current_value = settings.get(actual_setting, True)
        new_value = not current_value
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        success = await backup_service.update_backup_settings({actual_setting: new_value})
        
        if not success:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫—É {actual_setting}")
            return
        
        setting_labels = {
            "enabled": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ",
            "notifications": "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            "compression": "–°–∂–∞—Ç–∏–µ –∞—Ä—Ö–∏–≤–æ–≤",
            "db_backup": "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
            "settings_backup": "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"
        }
        
        status = "–≤–∫–ª—é—á–µ–Ω–æ" if new_value else "–æ—Ç–∫–ª—é—á–µ–Ω–æ"
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ '{setting_labels[setting_name]}' {status}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é –±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        updated_settings = await backup_service.get_backup_settings()
        
        enabled = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if updated_settings.get("backup_enabled") else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ"
        notifications = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if updated_settings.get("notify_admin") else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"
        compression = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if updated_settings.get("compress_backups") else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ"
        db_backup = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if updated_settings.get("backup_database") else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ"
        settings_backup = "‚úÖ –í–∫–ª—é—á–µ–Ω–æ" if updated_settings.get("backup_settings") else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ"
        
        text = (
            f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
            f"üîÑ <b>–ê–≤—Ç–æ–±—ç–∫–∞–ø:</b> {enabled}\n"
            f"‚è∞ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª:</b> {updated_settings.get('backup_interval_hours', 24)} —á–∞—Å–æ–≤\n"
            f"üì¶ <b>–ú–∞–∫—Å. –±—ç–∫–∞–ø–æ–≤:</b> {updated_settings.get('max_backups', 7)}\n"
            f"üìß <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {notifications}\n"
            f"üóúÔ∏è <b>–°–∂–∞—Ç–∏–µ:</b> {compression}\n"
            f"üíæ <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> {db_backup}\n"
            f"üìÑ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b> {settings_backup}\n\n"
            f"<i>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:</i>"
        )
        
        await callback.message.edit_text(text, reply_markup=build_backup_settings_menu())
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", show_alert=True)


@router.callback_query(F.data == "backup_settings:set_interval")
async def backup_settings_set_interval(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await callback.message.edit_text(
        "‚è∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —á–∞—Å–∞—Ö (–æ—Ç 1 –¥–æ 168):\n"
        "‚Ä¢ 1 = –∫–∞–∂–¥—ã–π —á–∞—Å\n"
        "‚Ä¢ 6 = –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤\n"
        "‚Ä¢ 24 = —Ä–∞–∑ –≤ –¥–µ–Ω—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n"
        "‚Ä¢ 168 = —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é\n\n"
        "<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 168:</i>"
    )
    await state.set_state(BackupStates.waiting_for_interval)
    await callback.answer()


@router.message(BackupStates.waiting_for_interval)
async def backup_process_interval(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞"""
    try:
        interval = int(message.text.strip())
        
        if not 1 <= interval <= 168:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n"
                "–ò–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 168 —á–∞—Å–æ–≤."
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        await backup_service.update_backup_settings({"backup_interval_hours": interval})
        
        await message.answer(
            f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {interval} —á–∞—Å–æ–≤",
            reply_markup=InlineKeyboardBuilder().button(
                text="‚óÄÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="backup:settings"
            ).as_markup()
        )
        
        await state.clear()
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 168."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        await state.clear()


@router.callback_query(F.data == "backup_settings:set_max_backups")
async def backup_settings_set_max_backups(callback: CallbackQuery, state: FSMContext):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ç–∫–∞–ø–æ–≤"""
    await callback.message.edit_text(
        "üì¶ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ö—Ä–∞–Ω–∏–º—ã—Ö –±—ç–∫–∞–ø–æ–≤</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è (–æ—Ç 1 –¥–æ 50):\n"
        "‚Ä¢ 3 = —Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ 3 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –±—ç–∫–∞–ø–∞\n"
        "‚Ä¢ 7 = —Ö—Ä–∞–Ω–∏—Ç—å –Ω–µ–¥–µ–ª—é –±—ç–∫–∞–ø–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)\n"
        "‚Ä¢ 30 = —Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Å—è—Ü –±—ç–∫–∞–ø–æ–≤\n\n"
        "<i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50:</i>"
    )
    await state.set_state(BackupStates.waiting_for_max_backups)
    await callback.answer()


@router.message(BackupStates.waiting_for_max_backups)
async def backup_process_max_backups(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±—ç–∫–∞–ø–æ–≤"""
    try:
        max_backups = int(message.text.strip())
        
        if not 1 <= max_backups <= 50:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!\n"
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 50."
            )
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        await backup_service.update_backup_settings({"max_backups": max_backups})
        
        await message.answer(
            f"‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ç–∫–∞–ø–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {max_backups}",
            reply_markup=InlineKeyboardBuilder().button(
                text="‚óÄÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="backup:settings"
            ).as_markup()
        )
        
        await state.clear()
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 50."
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ max_backups: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        await state.clear()


@router.callback_query(F.data == "backup:export_project")
async def backup_export_project(callback: CallbackQuery):
    """–°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞"""
    try:
        await callback.message.edit_text(
            "üì¶ <b>–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞...</b>\n\n"
            "‚è≥ –°–æ–∑–¥–∞–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –∞—Ä—Ö–∏–≤ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ –≤—Å–µ–º –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º, –¥–∞–Ω–Ω—ã–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...",
        )
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞
        export_path = await create_project_export()
        
        if export_path:
            export_name = Path(export_path).name
            size = format_file_size(Path(export_path).stat().st_size)
            
            text = (
                "‚úÖ <b>–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
                f"üìÅ <b>–§–∞–π–ª:</b> <code>{export_name}</code>\n"
                f"üíæ <b>–†–∞–∑–º–µ—Ä:</b> {size}\n"
                f"üïê <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n\n"
                f"üìã <b>–°–æ–¥–µ—Ä–∂–∏—Ç:</b>\n"
                f"‚Ä¢ –ü–æ–ª–Ω—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞\n"
                f"‚Ä¢ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ—Å—Ç–∞–º–∏ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏\n"
                f"‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã\n"
                f"‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n\n"
                f"üéØ <b>–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ:</b> –ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –Ω–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ"
            )
            
            builder = InlineKeyboardBuilder()
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–ª–Ω—ã–π timestamp –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (YYYYMMDD_HHMMSS)
            timestamp = export_name.replace("project_export_", "").replace(".zip", "")
            builder.button(text="üì• –°–∫–∞—á–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç", callback_data=f"backup:dl_export:{timestamp}")
            builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="backup:main")
            builder.adjust(1)
            
        else:
            text = (
                "‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞!</b>\n\n"
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
            )
            
            builder = InlineKeyboardBuilder()
            builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="backup:main")
        
        await callback.message.edit_text(text, reply_markup=builder.as_markup())
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞: {e}")
        await callback.message.edit_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞!</b>\n\n"
            f"–î–µ—Ç–∞–ª–∏: <code>{str(e)}</code>",
            reply_markup=InlineKeyboardBuilder().button(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="backup:main"
            ).as_markup()
        )
        await callback.answer()


@router.callback_query(F.data.startswith("backup:dl_export:"))
async def backup_download_export(callback: CallbackQuery):
    """–°–∫–∞—á–∞—Ç—å —ç–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞"""
    try:
        timestamp = callback.data.split(":", 2)[2]
        # –ò—â–µ–º —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ timestamp
        backup_dir = Path("backups")
        search_pattern = f"project_export_{timestamp}.zip"
        logger.info(f"–ü–æ–∏—Å–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞: –ø–∞—Ç—Ç–µ—Ä–Ω={search_pattern}, timestamp={timestamp}")
        export_files = list(backup_dir.glob(search_pattern))
        
        if not export_files:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã —ç–∫—Å–ø–æ—Ä—Ç–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            all_exports = list(backup_dir.glob("project_export_*.zip"))
            logger.error(f"–≠–∫—Å–ø–æ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω! –û–∂–∏–¥–∞–ª–∏: {search_pattern}, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã: {[f.name for f in all_exports]}")
            await callback.answer("‚ùå –§–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
            
        export_path = export_files[0]
        export_name = export_path.name
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        document = FSInputFile(str(export_path), filename=export_name)
        
        formatted_time = await format_time_with_timezone(datetime.fromtimestamp(export_path.stat().st_mtime))
        caption = (
            f"üì¶ <b>–≠–∫—Å–ø–æ—Ä—Ç –ø—Ä–æ–µ–∫—Ç–∞ Autoposter Bot</b>\n\n"
            f"üìÅ <b>–§–∞–π–ª:</b> <code>{export_name}</code>\n"
            f"üíæ <b>–†–∞–∑–º–µ—Ä:</b> {format_file_size(export_path.stat().st_size)}\n"
            f"üïê <b>–°–æ–∑–¥–∞–Ω:</b> {formatted_time}\n\n"
            f"üìã <b>–°–æ–¥–µ—Ä–∂–∏—Ç:</b> –ü–æ–ª–Ω—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ + –¥–∞–Ω–Ω—ã–µ + –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            f"üéØ <b>–î–ª—è:</b> –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–∞ –Ω–æ–≤–æ–º —Å–µ—Ä–≤–µ—Ä–µ"
        )
        
        await callback.message.answer_document(
            document=document,
            caption=caption
        )
        
        await callback.answer("‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞", show_alert=True)