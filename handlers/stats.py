"""
@file: handlers/stats.py
@description: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–∞
@dependencies: database/posts_db.py, database/settings_db.py
@created: 2025-01-20
"""

import logging
from datetime import datetime, timedelta, timezone
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from database.settings_db import get_setting
from database.posts_db import count_posts, get_last_post_time

logger = logging.getLogger(__name__)
router = Router()

def format_time_with_timezone(dt: datetime, user_timezone: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞"""
    if dt is None:
        return None
    
    try:
        # –ü–∞—Ä—Å–∏–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_timezone.startswith('+'):
            tz_offset = int(user_timezone[1:])
        elif user_timezone.startswith('-'):
            tz_offset = -int(user_timezone[1:])
        else:
            tz_offset = 3  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é UTC+3 (–ú–æ—Å–∫–≤–∞)
        
        # –í—Å–µ –Ω–æ–≤—ã–µ –ø–æ—Å—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ UTC, –ø–æ—ç—Ç–æ–º—É –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∫–∞–∫ UTC
        if dt.tzinfo is None:
            # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏–∑ –ë–î –∫–∞–∫ UTC
            dt = dt.replace(tzinfo=timezone.utc)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        user_tz = timezone(timedelta(hours=tz_offset))
        local_time = dt.astimezone(user_tz)
        
        return local_time.strftime('%d.%m.%Y %H:%M')
        
    except (ValueError, TypeError) as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        # Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è
        return dt.strftime('%d.%m.%Y %H:%M')

@router.callback_query(F.data == "menu:stats")
async def cb_menu_stats(cb: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'"""
    logger.info(f"Callback menu:stats –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {cb.from_user.id}")
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Ç–∞—Ö
        total_posts = await count_posts()
        last_post_time = await get_last_post_time()
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        user_timezone = await get_setting("user_timezone", "+3")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ auto_mode)
        auto_enabled_raw = await get_setting("auto_posting_enabled", False)
        auto_mode_status = await get_setting("auto_mode_status", "off")
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –±—É–ª–µ–≤–æ–º—É —Ç–∏–ø—É —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        if isinstance(auto_enabled_raw, str):
            auto_enabled = auto_enabled_raw.lower() in ['true', '1', 'on', 'yes']
        else:
            auto_enabled = bool(auto_enabled_raw)
            
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ auto_mode_status
        auto_enabled = auto_enabled and (auto_mode_status == "on")
        
        interval_minutes_raw = await get_setting("post_interval_minutes", 240)
        interval_minutes = int(interval_minutes_raw)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        if interval_minutes < 60:
            interval_display = f"{interval_minutes} –º–∏–Ω—É—Ç(—ã)"
        elif interval_minutes % 60 == 0:
            hours = interval_minutes // 60
            interval_display = f"{hours} —á–∞—Å(–æ–≤)"
        else:
            hours = interval_minutes // 60
            minutes = interval_minutes % 60
            interval_display = f"{hours}—á {minutes}–º–∏–Ω"
        
        stats_text = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–∞—Ö
        stats_text += f"üìù <b>–ü—É–±–ª–∏–∫–∞—Ü–∏–∏:</b>\n"
        stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {total_posts}\n"
        
        if last_post_time:
            formatted_time = format_time_with_timezone(last_post_time, user_timezone)
            stats_text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Å—Ç: {formatted_time}\n"
        else:
            stats_text += f"‚Ä¢ –ü–æ—Å—Ç–æ–≤ –µ—â–µ –Ω–µ –±—ã–ª–æ\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–µ
        stats_text += f"\nü§ñ <b>–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥:</b>\n"
        if auto_enabled:
            stats_text += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚úÖ <b>–í–∫–ª—é—á–µ–Ω</b>\n"
            stats_text += f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: <b>{interval_display}</b>\n"
            
            # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞
            if last_post_time:
                next_post_time = last_post_time + timedelta(minutes=interval_minutes)
                now = datetime.utcnow()
                
                if next_post_time > now:
                    time_diff = next_post_time - now
                    hours_left = int(time_diff.total_seconds() // 3600)
                    minutes_left = int((time_diff.total_seconds() % 3600) // 60)
                    
                    if hours_left > 0:
                        stats_text += f"‚Ä¢ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞: {hours_left}—á {minutes_left}–º–∏–Ω\n"
                    else:
                        stats_text += f"‚Ä¢ –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞: {minutes_left}–º–∏–Ω\n"
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Å—Ç–∞ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
                    formatted_next_time = format_time_with_timezone(next_post_time, user_timezone)
                    stats_text += f"‚Ä¢ –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç: {formatted_next_time}\n"
                else:
                    stats_text += f"‚Ä¢ –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç: –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n"
            else:
                stats_text += f"‚Ä¢ –°–ª–µ–¥—É—é—â–∏–π –ø–æ—Å—Ç: –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏\n"
        else:
            stats_text += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: ‚ùå –í—ã–∫–ª—é—á–µ–Ω\n"
            stats_text += f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval_display} (–Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω)\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
        stats_text += f"\nüïí <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> UTC{user_timezone}\n"
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        back_kb = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]]
        )
        
        try:
            await cb.message.edit_text(stats_text, reply_markup=back_kb)
        except Exception as edit_error:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_error}")
            await cb.message.answer(stats_text, reply_markup=back_kb)
        
        await cb.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏") 