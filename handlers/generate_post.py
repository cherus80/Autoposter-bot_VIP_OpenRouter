"""
@file: handlers/generate_post.py
@description: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ —Å FSM
@dependencies: services/ai_service.py, managers/publishing_manager.py, services/vk_service.py
@created: 2025-01-20
"""

import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from services.ai_service import AIService
from services.vk_service import VKService
from managers.publishing_manager import (
    publish_to_telegram,
    get_publishing_settings,
    publish_to_vk,
)
from database.posts_db import save_post
from config import FAL_AI_KEY, OPENAI_API_KEY

logger = logging.getLogger(__name__)
router = Router()
ai_service = AIService()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ FSM ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
class GeneratePost(StatesGroup):
    waiting_for_type = State()
    waiting_for_style = State()
    waiting_for_topic = State()
    waiting_for_edit = State()
    waiting_for_confirm = State()

def _post_type_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üñºÔ∏è –° –∫–∞—Ä—Ç–∏–Ω–∫–æ–π", callback_data="ptype:image"),
                InlineKeyboardButton(text="‚úçÔ∏è –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç", callback_data="ptype:text"),
            ]
        ]
    )

def _style_kb(prefix: str = "style:") -> InlineKeyboardMarkup:
    styles = {
        "photo": "üì∑ –§–æ—Ç–æ",
        "digital_art": "üé® Digital Art",
        "anime": "üå∏ –ê–Ω–∏–º–µ",
        "cyberpunk": "ü§ñ –ö–∏–±–µ—Ä–ø–∞–Ω–∫",
        "none": "üö´ –ë–µ–∑ —Å—Ç–∏–ª—è",
    }
    buttons = [
        InlineKeyboardButton(text=v, callback_data=f"{prefix}{k}") for k, v in styles.items()
    ]
    rows = [buttons[i : i + 2] for i in range(0, len(buttons), 2)]
    return InlineKeyboardMarkup(inline_keyboard=rows)

@router.callback_query(F.data == "menu:generate_post")
async def cb_menu_generate_post(cb: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç'"""
    logger.info(f"Callback menu:generate_post –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {cb.from_user.id}")
    await state.set_state(GeneratePost.waiting_for_type)
    await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ—Å—Ç–∞:", reply_markup=_post_type_kb())
    await cb.answer()



# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –≤—ã–±–æ—Ä —Ç–∏–ø–∞ / —Å—Ç–∏–ª—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(GeneratePost.waiting_for_type, F.data.startswith("ptype:"))
async def cb_post_type(cb: CallbackQuery, state: FSMContext):
    ptype = cb.data.split(":")[1]
    logger.info(f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø –ø–æ—Å—Ç–∞: {ptype}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ Fal.ai –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
    if ptype == "image" and not FAL_AI_KEY:
        await cb.message.edit_text(
            "‚ùå <b>Fal.ai —Ç–æ–∫–µ–Ω –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω!</b>\n\n"
            "üñºÔ∏è –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å FAL_AI_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.\n\n"
            "üí° <i>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ FAL_AI_KEY –≤ .env —Ñ–∞–π–ª.</i>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ—Å—Ç", callback_data="ptype:text")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="menu:main")]
            ])
        )
        await cb.answer("‚ùå Fal.ai —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        return
    
    await state.update_data(with_image=(ptype == "image"))
    if ptype == "image":
        await state.set_state(GeneratePost.waiting_for_style)
        await cb.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", reply_markup=_style_kb())
    else:
        await state.set_state(GeneratePost.waiting_for_topic)
        await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –ø–æ—Å—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üé§:")
    await cb.answer()

@router.callback_query(GeneratePost.waiting_for_style, F.data.startswith("style:"))
async def cb_style(cb: CallbackQuery, state: FSMContext):
    style = cb.data.split(":")[1]
    logger.info(f"–í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: {style}")
    await state.update_data(image_style=style)
    await state.set_state(GeneratePost.waiting_for_topic)
    await cb.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –ø–æ—Å—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üé§:")
    await cb.answer()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–º—ã / –≥–µ–Ω–µ—Ä–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(GeneratePost.waiting_for_topic)
async def msg_topic(msg: Message, state: FSMContext):
    data = await state.get_data()
    topic = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º—É
    if msg.text:
        topic = msg.text.strip()
    elif msg.voice:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenAI API –∫–ª—é—á–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        if not OPENAI_API_KEY:
            await msg.answer(
                "‚ùå <b>OpenAI API –∫–ª—é—á –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω!</b>\n\n"
                "üé§ –î–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.\n\n"
                "üí° <i>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ OPENAI_API_KEY –≤ .env —Ñ–∞–π–ª.</i>\n\n"
                "‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –ø–æ—Å—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º."
            )
            return
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await msg.answer("üé§ –†–∞—Å–ø–æ–∑–Ω–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        try:
            from utils.text_utils import transcribe_voice_message
            transcribed_text = await transcribe_voice_message(msg.bot, msg.voice)
            
            if transcribed_text:
                topic = transcribed_text.strip()
                await msg.answer(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: \"{topic}\"\n\n‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç...")
            else:
                await msg.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —Ç–µ–∫—Å—Ç–æ–º.")
                return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await msg.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —Ç–µ–∫—Å—Ç–æ–º.")
            return
    elif msg.caption:
        topic = msg.caption.strip()
    else:
        await msg.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –ø–æ—Å—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")
        return
    
    if not topic:
        await msg.answer("‚ùå –¢–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –ø–æ—Å—Ç–∞:")
        return
        
    logger.info(f"–¢–µ–º–∞ –ø–æ—Å—Ç–∞: {topic}")
    
    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not msg.voice:
        await msg.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç‚Ä¶")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø—Ä–æ–º–ø—Ç–æ–≤
        system_prompt = await ai_service.prompt_manager.get_prompt('content_generation')
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç —á–µ—Ä–µ–∑ OpenRouter
        result = await ai_service.generate_post(
            topic=topic,
            with_image=data.get("with_image", False),
            image_style=data.get("image_style", "none"),
            system_prompt=system_prompt
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        if not result or not result.get("text"):
            # OpenRouter API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await msg.answer(
                "‚ö†Ô∏è <b>–í—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –ø–æ—Å—Ç–æ–≤</b>\n\n"
                "üîÑ –°–µ—Ä–≤–∏—Å OpenRouter.ai –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ë—ã–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n\n"
                "üí° <i>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</i>\n\n"
                "üîß –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞ –∏ —Å—Ç–∞—Ç—É—Å OpenRouter.ai"
            )
            await state.clear()
            return
        
        # –£–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–∞
        from utils.text_utils import TextUtils
        improved_text = TextUtils.improve_post_quality(result["text"])
        
        await state.update_data(
            post_text=improved_text, 
            image_url=result.get("image_url"),
            topic=topic  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—É –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        )

        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="post:publish"),
                    InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data="post:edit"),
                ]
            ]
        )
        await msg.answer(improved_text, reply_markup=kb, disable_web_page_preview=True)
        await state.set_state(GeneratePost.waiting_for_confirm)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å OpenRouter API
        error_str = str(e).lower()
        if any(keyword in error_str for keyword in ['openrouter', 'connection', 'timeout', 'api']):
            await msg.answer(
                "‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ AI —Å–µ—Ä–≤–∏—Å—É</b>\n\n"
                "üîÑ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ OpenRouter.ai –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.\n\n"
                "üí° <i>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.</i>\n\n"
                "üÜò –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        else:
            await msg.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞</b>\n\n"
                "üîß –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n"
                "üí° <i>–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.</i>"
            )
        await state.clear()

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ / –ø—É–±–ª–∏–∫–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.callback_query(GeneratePost.waiting_for_confirm, F.data == "post:edit")
async def cb_edit_post(cb: CallbackQuery, state: FSMContext):
    await cb.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
    await state.set_state(GeneratePost.waiting_for_edit)
    await cb.answer()

@router.message(GeneratePost.waiting_for_edit)
async def msg_edited(msg: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç
    if msg.text:
        edited_text = msg.text
    elif msg.caption:
        edited_text = msg.caption
    else:
        await msg.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞.")
        return
    
    if not edited_text.strip():
        await msg.answer("‚ùå –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
        return
        
    await state.update_data(post_text=edited_text)
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="post:publish")]])
    await msg.answer("–ì–æ—Ç–æ–≤–æ:")
    await msg.answer(edited_text, reply_markup=kb, disable_web_page_preview=True)
    await state.set_state(GeneratePost.waiting_for_confirm)

@router.callback_query(GeneratePost.waiting_for_confirm, F.data == "post:publish")
async def cb_publish(cb: CallbackQuery, state: FSMContext):
    """–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        data = await state.get_data()
        post_text = data["post_text"]
        image_url = data.get("image_url")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        settings = await get_publishing_settings(user_id=cb.from_user.id)
        
        published_platforms = []
        errors = []
        
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Telegram
        if settings.publish_to_tg:
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –∞ –Ω–µ —Ç–µ–∫—É—â–∏–π —á–∞—Ç
                from config import CHANNEL_ID
                if CHANNEL_ID:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è Telegram
                    from utils.text_utils import TextUtils
                    tg_formatted_text = TextUtils.format_for_platform(post_text, "telegram")
                    await publish_to_telegram(cb.bot, CHANNEL_ID, tg_formatted_text, image_url)
                    published_platforms.append("Telegram")
                else:
                    logger.warning("CHANNEL_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                    errors.append("Telegram (–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–∞–Ω–∞–ª)")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ Telegram: {e}")
                errors.append(f"Telegram ({str(e)})")
        
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ VK
        if settings.publish_to_vk:
            try:
                vk_service = VKService()
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ VK —Å–µ—Ä–≤–∏—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω
                if vk_service.is_configured:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è VK
                    from utils.text_utils import TextUtils
                    vk_formatted_text = TextUtils.format_for_platform(post_text, "vk")
                    success = await publish_to_vk(vk_service, vk_formatted_text, image_url)
                    if success:
                        published_platforms.append("VK")
                    else:
                        errors.append("VK (–æ—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏)")
                else:
                    errors.append("VK (–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–æ–∫–µ–Ω—ã)")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ VK: {e}")
                errors.append(f"VK ({str(e)})")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if published_platforms:
            try:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã
                platforms = {
                    'telegram': 'Telegram' in published_platforms,
                    'vk': 'VK' in published_platforms
                }
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–º—É –∏–∑ FSM –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞
                topic = data.get("topic", post_text[:50] + "..." if len(post_text) > 50 else post_text)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                await save_post(
                    content=post_text,
                    with_image=bool(image_url),
                    image_url=image_url,
                    platforms=platforms,
                    topic=topic,
                    post_type="–†—É—á–Ω–æ–π"
                )
                
                logger.info(f"–ü–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: {published_platforms}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å—Ç–∞ –≤ –ë–î: {e}")
                # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if published_platforms:
            success_msg = f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤: {', '.join(published_platforms)}"
            if errors:
                success_msg += f"\n‚ö†Ô∏è –û—à–∏–±–∫–∏: {', '.join(errors)}"
            await cb.message.answer(success_msg)
        else:
            if errors:
                await cb.message.answer(f"‚ùå –û—à–∏–±–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n{chr(10).join(errors)}")
            else:
                await cb.message.answer("‚ö†Ô∏è –ù–∏ –æ–¥–Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
        
        await state.clear()
        await cb.answer()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
        await cb.answer("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏") 