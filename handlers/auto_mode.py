"""
@file: handlers/auto_mode.py
@description: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UX
@dependencies: database/settings_db.py
@created: 2025-01-20
@updated: 2025-01-21 - –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
"""

import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton

from database.settings_db import get_setting, update_setting
from config import FAL_AI_KEY

logger = logging.getLogger(__name__)
router = Router()

async def safe_edit_message(cb: CallbackQuery, text: str, reply_markup=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å fallback –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–æ–≤–æ–≥–æ"""
    try:
        await cb.message.edit_text(text, reply_markup=reply_markup)
    except Exception as edit_error:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {edit_error}")
        await cb.message.answer(text, reply_markup=reply_markup)

# FSM –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
class SetInterval(StatesGroup):
    waiting_for_unit_choice = State()  # –í—ã–±–æ—Ä –º–∏–Ω—É—Ç—ã/—á–∞—Å—ã
    waiting_for_interval = State()     # –í–≤–æ–¥ –∑–Ω–∞—á–µ–Ω–∏—è

def build_auto_mode_breadcrumbs():
    """Breadcrumbs –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    return InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"),
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
        ]]
    )

def _style_kb(prefix: str = "auto_style:") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    styles = {
        "photo": "üì∑ –§–æ—Ç–æ",
        "digital_art": "üé® Digital Art", 
        "anime": "üå∏ –ê–Ω–∏–º–µ",
        "cyberpunk": "ü§ñ –ö–∏–±–µ—Ä–ø–∞–Ω–∫",
        "fantasy": "üßô‚Äç‚ôÇÔ∏è –§—ç–Ω—Ç–µ–∑–∏",
        "none": "üö´ –ë–µ–∑ —Å—Ç–∏–ª—è",
    }
    buttons = [
        InlineKeyboardButton(text=v, callback_data=f"{prefix}{k}") for k, v in styles.items()
    ]
    rows = [buttons[i : i + 2] for i in range(0, len(buttons), 2)]
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="auto:image_settings")])
    return InlineKeyboardMarkup(inline_keyboard=rows)

@router.callback_query(F.data == "menu:auto_mode")
async def cb_menu_auto_mode(cb: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥' —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    logger.info(f"Callback menu:auto_mode –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {cb.from_user.id}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏)
        auto_enabled_raw = await get_setting("auto_posting_enabled", False)
        auto_mode_status = await get_setting("auto_mode_status", "off")
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –±—É–ª–µ–≤–æ–º—É —Ç–∏–ø—É —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        if isinstance(auto_enabled_raw, str):
            auto_enabled = auto_enabled_raw.lower() in ['true', '1', 'on', 'yes']
        else:
            auto_enabled = bool(auto_enabled_raw)
            
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ auto_mode_status
        auto_enabled = auto_enabled and (auto_mode_status == "on")
        
        interval_hours_raw = await get_setting("posting_interval_hours", 24)
        interval_hours = int(interval_hours_raw)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
        interval_minutes_raw = await get_setting("post_interval_minutes", 240)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        interval_minutes = int(interval_minutes_raw)
        
        status_icon = "‚úÖ" if auto_enabled else "‚ùå"
        status_text = "–í–∫–ª—é—á–µ–Ω" if auto_enabled else "–í—ã–∫–ª—é—á–µ–Ω"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        if interval_minutes < 60:
            interval_display = f"{interval_minutes} –º–∏–Ω—É—Ç(—ã)"
        elif interval_minutes % 60 == 0:
            hours = interval_minutes // 60
            interval_display = f"{hours} —á–∞—Å(–æ–≤)"
        else:
            hours = interval_minutes // 60
            minutes = interval_minutes % 60
            interval_display = f"{hours}—á {minutes}–º–∏–Ω"
        
        info_text = f"ü§ñ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–æ–º</b>\n\n"
        info_text += f"üìä <b>–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:</b>\n"
        info_text += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {status_icon} <b>{status_text}</b>\n"
        info_text += f"‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª: <b>{interval_display}</b>\n\n"
        
        if auto_enabled:
            info_text += f"‚ö†Ô∏è <i>–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω. –ù–æ–≤—ã–µ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç " \
                        f"–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–µ {interval_display}.</i>\n\n"
        else:
            info_text += f"üí° <i>–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω. –í–∫–ª—é—á–∏—Ç–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π " \
                        f"–ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.</i>\n\n"
        
        info_text += f"üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
        toggle_text = "‚ùå –í—ã–∫–ª—é—á–∏—Ç—å" if auto_enabled else "‚úÖ –í–∫–ª—é—á–∏—Ç—å"
        toggle_icon = "‚ö†Ô∏è" if auto_enabled else "üöÄ"
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=f"{toggle_icon} {toggle_text}",
                callback_data="auto:confirm_toggle" if auto_enabled else "auto:toggle"
            )],
            [InlineKeyboardButton(text="‚è±Ô∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª", callback_data="auto:interval")],
            [InlineKeyboardButton(text="üñºÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="auto:image_settings")],
            [
                InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
            ]
        ])
        
        await safe_edit_message(cb, info_text, reply_markup=kb)
        await cb.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {e}")
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@router.callback_query(F.data == "auto:confirm_toggle")
async def cb_auto_confirm_toggle(cb: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    await safe_edit_message(cb,
        "‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥?\n"
        "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n\n"
        "üîÑ <i>–í—ã —Å–º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.</i>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–∫–ª—é—á–∏—Ç—å", callback_data="auto:toggle"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="menu:auto_mode")
            ]
        ])
    )
    await cb.answer()

@router.callback_query(F.data == "auto:toggle")
async def cb_auto_toggle(cb: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å —Ç–æ–π –∂–µ –ª–æ–≥–∏–∫–æ–π, —á—Ç–æ –∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
        auto_enabled_raw = await get_setting("auto_posting_enabled", False)
        auto_mode_status = await get_setting("auto_mode_status", "off")
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –±—É–ª–µ–≤–æ–º—É —Ç–∏–ø—É —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
        if isinstance(auto_enabled_raw, str):
            current_state = auto_enabled_raw.lower() in ['true', '1', 'on', 'yes']
        else:
            current_state = bool(auto_enabled_raw)
            
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ auto_mode_status
        current_state = current_state and (auto_mode_status == "on")
        
        new_state = not current_state
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –ø–µ—Ä–µ–¥ –≤–∫–ª—é—á–µ–Ω–∏–µ–º –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
        if new_state:
            from managers.content_plan_manager import ContentPlanManager
            content_manager = ContentPlanManager()
            unused_topics = await content_manager.count_unused_items()
            
            if unused_topics == 0:
                await safe_edit_message(cb,
                    "‚ö†Ô∏è <b>–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥</b>\n\n"
                    "üìù <b>–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω –ø—É—Å—Ç!</b>\n"
                    "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.\n\n"
                    "üéØ <b>–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:</b>\n"
                    "1. –ü–µ—Ä–µ–π—Ç–∏ –≤ <b>–ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω</b>\n"
                    "2. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–º—ã –¥–ª—è –ø–æ—Å—Ç–æ–≤\n"
                    "3. –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞\n\n"
                    "üí° <i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–∏–Ω–∏–º—É–º 10-20 —Ç–µ–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã.</i>",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="üìù –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω—É", callback_data="menu:content_plan")],
                        [InlineKeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞", callback_data="menu:auto_mode")]
                    ])
                )
                await cb.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω!")
                return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        await update_setting("auto_posting_enabled", 1 if new_state else 0)
        await update_setting("auto_mode_status", "on" if new_state else "off")
        
        if new_state:
            interval_minutes_raw = await get_setting("post_interval_minutes", 240)
            interval_minutes = int(interval_minutes_raw)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à–∏–π —Å–ø–æ—Å–æ–± –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            if interval_minutes < 60:
                interval_display = f"{interval_minutes} –º–∏–Ω—É—Ç(—ã)"
            elif interval_minutes % 60 == 0:
                hours = interval_minutes // 60
                interval_display = f"{hours} —á–∞—Å(–æ–≤)"
            else:
                hours = interval_minutes // 60
                minutes = interval_minutes % 60
                interval_display = f"{hours}—á {minutes}–º–∏–Ω"
            
            success_text = f"‚úÖ <b>–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤–∫–ª—é—á–µ–Ω!</b>\n\n" \
                          f"üöÄ –ü–æ—Å—Ç—ã –±—É–¥—É—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–µ <b>{interval_display}</b>.\n" \
                          f"üìä –°–ª–µ–¥–∏—Ç–µ –∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
        else:
            success_text = f"‚ùå <b>–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω</b>\n\n" \
                          f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.\n" \
                          f"üí° –í–∫–ª—é—á–∏—Ç–µ —Å–Ω–æ–≤–∞, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã."
        
        await cb.message.edit_text(
            success_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞", callback_data="menu:auto_mode")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
        )
        await cb.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞: {e}")
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@router.callback_query(F.data == "auto:interval")
async def cb_auto_interval(cb: CallbackQuery, state: FSMContext):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
    await state.set_state(SetInterval.waiting_for_unit_choice)
    
    current_interval_raw = await get_setting("posting_interval_hours", 24)
    current_interval = int(current_interval_raw)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
    
    await cb.message.edit_text(
        f"‚è±Ô∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏</b>\n\n"
        f"üìä <b>–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:</b> {current_interval} —á–∞—Å(–æ–≤)\n\n"
        f"üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è:</b>\n"
        f"‚Ä¢ <b>–ß–∞—Å—ã</b>\n"
        f"‚Ä¢ <b>–ú–∏–Ω—É—Ç—ã</b>\n\n"
        f"üí° <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—ã–±–æ—Ä:</i>",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ß–∞—Å—ã", callback_data="interval:hours")],
                [InlineKeyboardButton(text="–ú–∏–Ω—É—Ç—ã", callback_data="interval:minutes")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="auto:cancel")]
            ]
        )
    )
    await cb.answer()

# –í—ã–±–æ—Ä –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è
@router.callback_query(F.data == "interval:hours")
async def cb_select_hours(cb: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —á–∞—Å–∞—Ö"""
    await state.update_data(unit="hours")
    await state.set_state(SetInterval.waiting_for_interval)
    
    current_hours_raw = await get_setting("posting_interval_hours", 24)
    current_hours = int(current_hours_raw)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
    
    await cb.message.edit_text(
        f"‚è∞ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ —á–∞—Å–∞—Ö</b>\n\n"
        f"üìä <b>–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:</b> {current_hours} —á–∞—Å(–æ–≤)\n\n"
        f"üéØ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —á–∞—Å–∞—Ö:</b>\n"
        f"‚Ä¢ –ú–∏–Ω–∏–º—É–º: <b>1</b> —á–∞—Å\n"
        f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: <b>168</b> —á–∞—Å–æ–≤ (7 –¥–Ω–µ–π)\n"
        f"‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ: 1, 2, 4, 6, 12, 24 —á–∞—Å–∞\n\n"
        f"üí° <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 168 –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:</i>",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚ö° 1 —á–∞—Å", callback_data="quick:hours:1"),
                    InlineKeyboardButton(text="üïê 4 —á–∞—Å–∞", callback_data="quick:hours:4"),
                    InlineKeyboardButton(text="üïï 12 —á–∞—Å–æ–≤", callback_data="quick:hours:12")
                ],
                [
                    InlineKeyboardButton(text="üìÖ 24 —á–∞—Å–∞", callback_data="quick:hours:24"),
                    InlineKeyboardButton(text="üìÜ 72 —á–∞—Å–∞", callback_data="quick:hours:72")
                ],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="auto:cancel")]
            ]
        )
    )
    await cb.answer()

@router.callback_query(F.data == "interval:minutes")
async def cb_select_minutes(cb: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö"""
    await state.update_data(unit="minutes")
    await state.set_state(SetInterval.waiting_for_interval)
    
    current_minutes_raw = await get_setting("post_interval_minutes", 240)  # 4 —á–∞—Å–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    current_minutes = int(current_minutes_raw)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int
    
    await cb.message.edit_text(
        f"‚è±Ô∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö</b>\n\n"
        f"üìä <b>–¢–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:</b> {current_minutes} –º–∏–Ω—É—Ç(—ã)\n\n"
        f"üéØ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö:</b>\n"
        f"‚Ä¢ –ú–∏–Ω–∏–º—É–º: <b>1</b> –º–∏–Ω—É—Ç–∞\n"
        f"‚Ä¢ –ú–∞–∫—Å–∏–º—É–º: <b>10080</b> –º–∏–Ω—É—Ç (7 –¥–Ω–µ–π)\n"
        f"‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ: 5, 15, 30, 60, 120, 240 –º–∏–Ω—É—Ç\n\n"
        f"üí° <i>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10080 –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:</i>",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚ö° 5 –º–∏–Ω", callback_data="quick:minutes:5"),
                    InlineKeyboardButton(text="üïê 15 –º–∏–Ω", callback_data="quick:minutes:15"),
                    InlineKeyboardButton(text="üïï 30 –º–∏–Ω", callback_data="quick:minutes:30")
                ],
                [
                    InlineKeyboardButton(text="‚è∞ 1 —á–∞—Å", callback_data="quick:minutes:60"),
                    InlineKeyboardButton(text="‚è∞ 2 —á–∞—Å–∞", callback_data="quick:minutes:120"),
                    InlineKeyboardButton(text="‚è∞ 4 —á–∞—Å–∞", callback_data="quick:minutes:240")
                ],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="auto:cancel")]
            ]
        )
    )
    await cb.answer()

# –ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
@router.callback_query(F.data.startswith("quick:"))
async def cb_set_quick_interval_new(cb: CallbackQuery, state: FSMContext):
    """–ë—ã—Å—Ç—Ä–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–∏–Ω—É—Ç –∏ —á–∞—Å–æ–≤"""
    parts = cb.data.split(":")
    unit = parts[1]  # hours –∏–ª–∏ minutes
    value = int(parts[2])
    
    try:
        if unit == "hours":
            await update_setting("posting_interval_hours", value)
            # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º –º–∏–Ω—É—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º
            await update_setting("post_interval_minutes", value * 60)
            interval_text = f"{value} —á–∞—Å(–æ–≤)"
        else:  # minutes
            await update_setting("post_interval_minutes", value)
            # –¢–∞–∫–∂–µ –æ–±–Ω–æ–≤–ª—è–µ–º —á–∞—Å—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            await update_setting("posting_interval_hours", max(1, value // 60))
            interval_text = f"{value} –º–∏–Ω—É—Ç(—ã)"
        
        await state.clear()
        
        await cb.message.edit_text(
            f"‚úÖ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
            f"‚è±Ô∏è –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: <b>{interval_text}</b>\n"
            f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø—è—Ç –≤ —Å–∏–ª—É –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.\n\n"
            f"üí° <i>–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏.</i>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞", callback_data="menu:auto_mode")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
        )
        await cb.answer("‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: {e}")
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏")

@router.message(SetInterval.waiting_for_interval)
async def msg_set_interval(msg: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–∏–Ω—É—Ç –∏ —á–∞—Å–æ–≤"""
    if not msg.text:
        await msg.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —á–∏—Å–ª–æ–º.")
        return
    
    try:
        data = await state.get_data()
        unit = data.get("unit", "hours")
        interval = int(msg.text.strip())
        
        if unit == "hours":
            if not (1 <= interval <= 168):
                await msg.answer(
                    "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª!</b>\n\n"
                    "üéØ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç <b>1</b> –¥–æ <b>168</b> —á–∞—Å–æ–≤.\n"
                    "üí° –ù–∞–ø—Ä–∏–º–µ—Ä: 4, 12, 24"
                )
                return
            
            await update_setting("posting_interval_hours", interval)
            await update_setting("post_interval_minutes", interval * 60)
            interval_text = f"{interval} —á–∞—Å(–æ–≤)"
            
        else:  # minutes
            if not (1 <= interval <= 10080):  # 7 –¥–Ω–µ–π = 10080 –º–∏–Ω—É—Ç
                await msg.answer(
                    "‚ùå <b>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª!</b>\n\n"
                    "üéØ –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç <b>1</b> –¥–æ <b>10080</b> –º–∏–Ω—É—Ç.\n"
                    "üí° –ù–∞–ø—Ä–∏–º–µ—Ä: 5, 15, 30, 60, 240"
                )
                return
            
            await update_setting("post_interval_minutes", interval)
            await update_setting("posting_interval_hours", max(1, interval // 60))
            interval_text = f"{interval} –º–∏–Ω—É—Ç(—ã)"
        
        await state.clear()
        
        await msg.answer(
            f"‚úÖ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
            f"‚è±Ô∏è –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: <b>{interval_text}</b>\n"
            f"üîÑ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –±—É–¥–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç—ã –∫–∞–∂–¥—ã–µ {interval_text}.\n\n"
            f"üí° <i>–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–Ω—É—Ç–∞—Ö –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏.</i>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞", callback_data="menu:auto_mode")],
                [InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ])
        )
        
    except ValueError:
        await msg.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞!</b>\n\n"
            "üéØ –í–≤–µ–¥–∏—Ç–µ <b>—á–∏—Å–ª–æ</b>.\n"
            "üí° –ù–∞–ø—Ä–∏–º–µ—Ä: <code>30</code> (–¥–ª—è 30 –º–∏–Ω—É—Ç) –∏–ª–∏ <code>2</code> (–¥–ª—è 2 —á–∞—Å–æ–≤)"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞: {e}")
        await msg.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@router.callback_query(F.data == "auto:cancel")
async def cb_auto_cancel(cb: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –≤ –º–µ–Ω—é"""
    await state.clear()
    await cb.answer("‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞
    await cb_menu_auto_mode(cb)

@router.callback_query(F.data == "auto:image_settings")
async def cb_auto_image_settings(cb: CallbackQuery):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        with_image = await get_setting("autofeed_with_image", "off")
        image_style = await get_setting("autofeed_image_style", "fantasy")
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç–∏–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        style_names = {
            "photo": "üì∑ –§–æ—Ç–æ",
            "digital_art": "üé® Digital Art", 
            "anime": "üå∏ –ê–Ω–∏–º–µ",
            "cyberpunk": "ü§ñ –ö–∏–±–µ—Ä–ø–∞–Ω–∫",
            "fantasy": "üßô‚Äç‚ôÇÔ∏è –§—ç–Ω—Ç–µ–∑–∏",
            "none": "üö´ –ë–µ–∑ —Å—Ç–∏–ª—è",
        }
        
        with_image_status = "‚úÖ –í–∫–ª—é—á–µ–Ω—ã" if with_image == "on" else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã"
        style_display = style_names.get(image_style, image_style)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Fal.ai —Ç–æ–∫–µ–Ω–∞
        fal_status = "üîë –¢–æ–∫–µ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω" if FAL_AI_KEY else "‚ùå –¢–æ–∫–µ–Ω –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
        
        info_text = f"üñºÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞</b>\n\n"
        info_text += f"üìä <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        info_text += f"‚Ä¢ Fal.ai: <b>{fal_status}</b>\n"
        info_text += f"‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: <b>{with_image_status}</b>\n"
        if with_image == "on":
            info_text += f"‚Ä¢ –°—Ç–∏–ª—å: <b>{style_display}</b>\n"
        info_text += f"\nüí° <i>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–º –ø–æ—Å—Ç–∞–º.</i>\n\n"
        info_text += f"üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
        
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        toggle_text = "‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è" if with_image == "on" else "‚úÖ –í–∫–ª—é—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"
        
        kb_buttons = [
            [InlineKeyboardButton(text=toggle_text, callback_data="auto:toggle_images")]
        ]
        
        # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è
        if with_image == "on":
            kb_buttons.append([InlineKeyboardButton(text="üé® –í—ã–±—Ä–∞—Ç—å —Å—Ç–∏–ª—å", callback_data="auto:choose_style")])
        
        kb_buttons.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥—É", callback_data="menu:auto_mode")])
        
        kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
        
        await cb.message.edit_text(info_text, reply_markup=kb)
        await cb.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@router.callback_query(F.data == "auto:toggle_images")
async def cb_auto_toggle_images(cb: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–µ"""
    try:
        current_state = await get_setting("autofeed_with_image", "off")
        new_state = "off" if current_state == "on" else "on"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ Fal.ai –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        if new_state == "on" and not FAL_AI_KEY:
            await cb.message.edit_text(
                "‚ùå <b>Fal.ai —Ç–æ–∫–µ–Ω –ù–ï –Ω–∞—Å—Ç—Ä–æ–µ–Ω!</b>\n\n"
                "üñºÔ∏è –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å FAL_AI_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.\n\n"
                "üí° <i>–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ FAL_AI_KEY –≤ .env —Ñ–∞–π–ª.</i>\n\n"
                "üîß <b>–ü–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–∫–µ–Ω–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.</b>",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="auto:image_settings")],
                    [InlineKeyboardButton(text="ü§ñ –ö –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥—É", callback_data="menu:auto_mode")]
                ])
            )
            await cb.answer("‚ùå Fal.ai —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
            return
        
        await update_setting("autofeed_with_image", new_state)
        
        if new_state == "on":
            success_text = f"‚úÖ <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!</b>\n\n" \
                          f"üñºÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–µ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n" \
                          f"üé® –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."
        else:
            success_text = f"‚ùå <b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã</b>\n\n" \
                          f"üìù –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–µ –ø–æ—Å—Ç—ã –±—É–¥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.\n" \
                          f"üí° –í–∫–ª—é—á–∏—Ç–µ —Å–Ω–æ–≤–∞, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –ø–æ—Å—Ç–∞–º."
        
        await cb.message.edit_text(
            success_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üñºÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="auto:image_settings")],
                [InlineKeyboardButton(text="ü§ñ –ö –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥—É", callback_data="menu:auto_mode")]
            ])
        )
        await cb.answer("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {e}")
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")

@router.callback_query(F.data == "auto:choose_style")
async def cb_auto_choose_style(cb: CallbackQuery):
    """–í—ã–±–æ—Ä —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    current_style = await get_setting("autofeed_image_style", "fantasy")
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç–∏–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    style_names = {
        "photo": "üì∑ –§–æ—Ç–æ",
        "digital_art": "üé® Digital Art", 
        "anime": "üå∏ –ê–Ω–∏–º–µ",
        "cyberpunk": "ü§ñ –ö–∏–±–µ—Ä–ø–∞–Ω–∫",
        "fantasy": "üßô‚Äç‚ôÇÔ∏è –§—ç–Ω—Ç–µ–∑–∏",
        "none": "üö´ –ë–µ–∑ —Å—Ç–∏–ª—è",
    }
    
    current_style_display = style_names.get(current_style, current_style)
    
    info_text = f"üé® <b>–í—ã–±–æ—Ä —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π</b>\n\n"
    info_text += f"üìä <b>–¢–µ–∫—É—â–∏–π —Å—Ç–∏–ª—å:</b> <b>{current_style_display}</b>\n\n"
    info_text += f"üí° <i>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:</i>"
    
    await cb.message.edit_text(info_text, reply_markup=_style_kb())
    await cb.answer()

@router.callback_query(F.data.startswith("auto_style:"))
async def cb_auto_set_style(cb: CallbackQuery):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∏–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞"""
    try:
        style = cb.data.split(":")[1]
        await update_setting("autofeed_image_style", style)
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º —Å—Ç–∏–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        style_names = {
            "photo": "üì∑ –§–æ—Ç–æ",
            "digital_art": "üé® Digital Art", 
            "anime": "üå∏ –ê–Ω–∏–º–µ",
            "cyberpunk": "ü§ñ –ö–∏–±–µ—Ä–ø–∞–Ω–∫",
            "fantasy": "üßô‚Äç‚ôÇÔ∏è –§—ç–Ω—Ç–µ–∑–∏",
            "none": "üö´ –ë–µ–∑ —Å—Ç–∏–ª—è",
        }
        
        style_display = style_names.get(style, style)
        
        success_text = f"‚úÖ <b>–°—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!</b>\n\n" \
                      f"üé® <b>–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å:</b> {style_display}\n\n" \
                      f"üñºÔ∏è –í—Å–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±—É–¥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –≤ —ç—Ç–æ–º —Å—Ç–∏–ª–µ."
        
        await cb.message.edit_text(
            success_text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üé® –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∏–ª—å", callback_data="auto:choose_style")],
                [InlineKeyboardButton(text="üñºÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="auto:image_settings")],
                [InlineKeyboardButton(text="ü§ñ –ö –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥—É", callback_data="menu:auto_mode")]
            ])
        )
        await cb.answer("‚úÖ –°—Ç–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —Å—Ç–∏–ª—è: {e}")
        await cb.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∏–ª—è") 