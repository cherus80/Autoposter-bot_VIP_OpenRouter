"""managers/publishing_manager.py
=================================================
–•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
-----------------------------------------------------------

‚Ä¢ –¢–∞–±–ª–∏—Ü–∞ `PublishingSettings` (user_id, publish_to_tg, publish_to_vk).
‚Ä¢ –ö–ª–∞—Å—Å `PublishingManager` ‚Äî CRUD + helper `publish_telegram()` (—É—á—ë—Ç
  –ª–∏–º–∏—Ç–∞ –ø–æ–¥–ø–∏—Å–∏ 1000‚ÄØ—Å–∏–º–≤–æ–ª–æ–≤).
‚Ä¢ –ü—Ä–æ–∫—Å–∏‚Äë—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞:
    - `get_publishing_settings`
    - `publish_to_telegram`
    - `publish_to_vk`
–í—Å–µ –æ–Ω–∏ –¥–µ–ª–µ–≥–∏—Ä—É—é—Ç –≤–Ω—É—Ç—Ä—å –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞.
"""
from __future__ import annotations

from typing import Optional

from aiogram import Bot
from sqlalchemy import select, update
from sqlalchemy.ext.asyncio import AsyncSession

from database.database import async_session_maker
from database.models import PublishingSettings
from services.vk_service import VKService

MAX_TG_CAPTION_LEN = 1000  # –∑–∞–ø–∞—Å –æ—Ç –ª–∏–º–∏—Ç–∞ 1024 —Å–∏–º–≤–æ–ª–∞


class PublishingManager:
    """–†–∞–±–æ—Ç–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π PublishingSettings –∏ —É—Ç–∏–ª–∏—Ç—ã –æ—Ç–ø—Ä–∞–≤–∫–∏."""

    def __init__(self, session_maker=async_session_maker):
        self.session_maker = session_maker

    # ------------------------------------------------------------------
    # DB helpers
    # ------------------------------------------------------------------
    async def _get_or_create_settings(self, session: AsyncSession, user_id: int):
        stmt = select(PublishingSettings).where(PublishingSettings.user_id == user_id)
        res = await session.execute(stmt)
        settings = res.scalar_one_or_none()

        if not settings:
            settings = PublishingSettings(user_id=user_id)
            session.add(settings)
            await session.commit()
            await session.refresh(settings)

        return settings

    async def get_settings(self, user_id: int = 1):
        async with self.session_maker() as session:
            return await self._get_or_create_settings(session, user_id)

    async def update_settings(
        self,
        user_id: int = 1,
        *,
        publish_to_tg: Optional[bool] = None,
        publish_to_vk: Optional[bool] = None,
    ):
        async with self.session_maker() as session:
            settings = await self._get_or_create_settings(session, user_id)

            values: dict[str, bool] = {}
            if publish_to_tg is not None:
                values["publish_to_tg"] = publish_to_tg
            if publish_to_vk is not None:
                values["publish_to_vk"] = publish_to_vk

            if values:
                stmt = (
                    update(PublishingSettings)
                    .where(PublishingSettings.user_id == user_id)
                    .values(**values)
                )
                await session.execute(stmt)
                await session.commit()
                await session.refresh(settings)

            return settings

    # ------------------------------------------------------------------
    # Telegram helper
    # ------------------------------------------------------------------
    async def publish_telegram(
        self,
        bot: Bot,
        chat_id: int,
        text: str,
        image_url: Optional[str] = None,
        parse_mode: str = "HTML",
    ) -> None:
        """–ü—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –≤ Telegram —Å —É—á—ë—Ç–æ–º –ª–∏–º–∏—Ç–∞ –ø–æ–¥–ø–∏—Å–∏."""

        if image_url and len(text) > MAX_TG_CAPTION_LEN:
            # 1) –î–ª–∏–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å ‚Üí —Ä–∞–∑–±–∏–≤–∞–µ–º
            await bot.send_photo(chat_id=chat_id, photo=image_url)
            await bot.send_message(chat_id=chat_id, text=text, parse_mode=parse_mode, disable_web_page_preview=True)
        elif image_url:
            # 2) –ö–æ—Ä–æ—Ç–∫–∞—è –ø–æ–¥–ø–∏—Å—å
            await bot.send_photo(
                chat_id=chat_id,
                photo=image_url,
                caption=text,
                parse_mode=parse_mode,
            )
        else:
            # 3) –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            await bot.send_message(chat_id=chat_id, text=text, parse_mode=parse_mode, disable_web_page_preview=True)


# ----------------------------------------------------------------------
# Ô∏èüîÑ  –§—É–Ω–∫—Ü–∏–∏‚Äë–æ–±—ë—Ä—Ç–∫–∏ –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–¥–∞
# ----------------------------------------------------------------------
_default_manager = PublishingManager()


async def get_publishing_settings(user_id: int = 1):  # noqa: D401
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç PublishingSettings –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ user_id."""
    return await _default_manager.get_settings(user_id)


async def publish_to_telegram(*args, **kwargs):  # noqa: D401, ANN001
    """–û–±—ë—Ä—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π —Å–∏–≥–Ω–∞—Ç—É—Ä—ã. –î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –≤ `PublishingManager.publish_telegram`."""
    await _default_manager.publish_telegram(*args, **kwargs)


async def publish_to_vk(vk_service: VKService, text: str, image_url: Optional[str] = None):  # noqa: D401
    """–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏: –≤—ã–∑—ã–≤–∞–µ—Ç VKService.post_to_group()."""
    return await vk_service.post_to_group(text, image_url=image_url)

# ------------------------------------------------------------------
# update_publishing_settings ‚Äî –µ—â—ë –æ–¥–Ω–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–∞—è –æ–±—ë—Ä—Ç–∫–∞
# ------------------------------------------------------------------
async def update_publishing_settings(  # noqa: D401
    user_id: int = 1,
    *,
    publish_to_tg: Optional[bool] = None,
    publish_to_vk: Optional[bool] = None,
):
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–ª–∞ –∏–º–µ–Ω–Ω–æ update_publishing_settings."""
    return await _default_manager.update_settings(
        user_id=user_id,
        publish_to_tg=publish_to_tg,
        publish_to_vk=publish_to_vk,
    )


__all__ = [
    "PublishingManager",
    "publish_to_telegram",
    "publish_to_vk",
    "get_publishing_settings",
    "update_publishing_settings",
]
