"""
@file: services/openrouter_service.py
@description: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenRouter.ai API —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º (HTTP –≤–µ—Ä—Å–∏—è)
@dependencies: config.py, utils/error_handler.py
@created: 2025-01-30
"""

import httpx
import json
import logging
import asyncio
from typing import Dict, Any, Optional, List
from config import OPENROUTER_API_KEY, OPENROUTER_POST_MODEL, OPENROUTER_IMAGE_PROMPT_MODEL, PROXY_URL, OPENROUTER_MAX_RETRIES, OPENROUTER_RETRY_DELAYS
from utils.error_handler import handle_errors, ErrorSeverity, graceful_degradation

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ retry –º–µ—Ö–∞–Ω–∏–∑–º–∞ (–∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
MAX_RETRIES = OPENROUTER_MAX_RETRIES
RETRY_DELAYS = OPENROUTER_RETRY_DELAYS
RETRYABLE_ERRORS = [
    "Connection error",
    "Timeout",
    "HTTP 429",  # Rate limit
    "HTTP 502",  # Bad Gateway
    "HTTP 503",  # Service Unavailable
    "HTTP 504",  # Gateway Timeout
]

class OpenRouterService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å OpenRouter.ai API —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã"""
    
    def __init__(self):
        self.api_key = OPENROUTER_API_KEY
        self.post_model = OPENROUTER_POST_MODEL
        self.image_prompt_model = OPENROUTER_IMAGE_PROMPT_MODEL
        self.base_url = "https://openrouter.ai/api/v1"
        
        if not self.api_key:
            logger.warning("OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. OpenRouter —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
            self.client = None
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.headers = {
            "Authorization": f"Bearer {self.api_key}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://github.com/openrouter/autoposter-bot",
            "X-Title": "Autoposter Bot"
        }
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP –∫–ª–∏–µ–Ω—Ç–∞
        if PROXY_URL:
            self.client = httpx.AsyncClient(proxies=PROXY_URL, timeout=30.0)
        else:
            self.client = httpx.AsyncClient(timeout=30.0)
        
        logger.info(f"OpenRouter —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—è–º–∏: posts={self.post_model}, image_prompts={self.image_prompt_model}")

    def _is_retryable_error(self, error: Exception) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ retryable
        
        Args:
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            True –µ—Å–ª–∏ –æ—à–∏–±–∫—É —Å—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å, False –∏–Ω–∞—á–µ
        """
        error_str = str(error).lower()
        
        # –ù–ï –ø–æ–≤—Ç–æ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –∏—Å–ø—Ä–∞–≤—è—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–∞–º–∏
        non_retryable_keywords = [
            'unsupported_country_region_territory',  # –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            'country, region, or territory not supported',
            'region not supported',
            'country not supported',
            'territory not supported',
            'authentication',  # –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–ª—é—á–æ–º API
            'unauthorized',
            'invalid_api_key',
            'insufficient_quota',  # –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–≤–æ—Ç–æ–π/–æ–ø–ª–∞—Ç–æ–π
            'quota_exceeded',
            'model_not_found',  # –ú–æ–¥–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            'invalid_model',
            'blocked_country',  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            'restricted_region',
            'geo_blocked',
            'geoblocked'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        for keyword in non_retryable_keywords:
            if keyword in error_str:
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä—ã –±–µ—Å–ø–æ–ª–µ–∑–Ω—ã: {keyword}")
                logger.error("üö® –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –º–æ–¥–µ–ª—å –±–µ–∑ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π")
                return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ retryable –æ—à–∏–±–∫–∏
        for retryable_error in RETRYABLE_ERRORS:
            if retryable_error.lower() in error_str:
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTPStatusError –æ—Ç httpx
        if hasattr(error, 'response'):
            status_code = error.response.status_code
            
            # 403 –º–æ–∂–µ—Ç –±—ã—Ç—å –≥–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π - –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
            if status_code == 403:
                logger.error(f"‚ùå HTTP 403 - –≤–æ–∑–º–æ–∂–Ω—ã –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º")
                logger.error("üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–¥–µ–ª—å –∏ —Ä–µ–≥–∏–æ–Ω")
                return False
            
            # 401 - –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
            if status_code == 401:
                logger.error(f"‚ùå HTTP 401 - –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π API")
                return False
            
            # Retryable —Å—Ç–∞—Ç—É—Å—ã
            if status_code in [429, 502, 503, 504]:
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º timeout –æ—à–∏–±–∫–∏
        if any(keyword in error_str for keyword in ['timeout', 'timed out', 'connection']):
            return True
            
        return False

    @handle_errors(context="OpenRouter API –≥–µ–Ω–µ—Ä–∞—Ü–∏—è", severity=ErrorSeverity.HIGH, fallback_return=None)
    async def generate_content(
        self,
        messages: List[Dict[str, str]],
        model: str = None,
        temperature: float = 0.7,
        max_tokens: int = 800,
        use_for_posts: bool = True
    ) -> Optional[Dict[str, Any]]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —á–µ—Ä–µ–∑ OpenRouter API —Å retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
        
        Args:
            messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{"role": "user/system", "content": "..."}]
            model: –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ None, –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (0.0-2.0)
            max_tokens: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            use_for_posts: –ï—Å–ª–∏ True, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ—Å—Ç–æ–≤, –∏–Ω–∞—á–µ –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        if not self.client:
            logger.error("OpenRouter –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None
        
        # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–∞
        if not model:
            model = self.post_model if use_for_posts else self.image_prompt_model
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        payload = {
            "model": model,
            "messages": messages,
            "temperature": temperature,
            "max_tokens": max_tokens
        }
        
        last_error = None
        
        # Retry –ª–æ–≥–∏–∫–∞
        for attempt in range(MAX_RETRIES):
            try:
                if attempt > 0:
                    delay = RETRY_DELAYS[min(attempt - 1, len(RETRY_DELAYS) - 1)]
                    logger.info(f"OpenRouter retry –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_RETRIES} —á–µ—Ä–µ–∑ {delay} —Å–µ–∫. –¥–ª—è –º–æ–¥–µ–ª–∏ {model}")
                    await asyncio.sleep(delay)
                else:
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ OpenRouter API: –º–æ–¥–µ–ª—å={model}, —Å–æ–æ–±—â–µ–Ω–∏–π={len(messages)}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST –∑–∞–ø—Ä–æ—Å
                response = await self.client.post(
                    f"{self.base_url}/chat/completions",
                    headers=self.headers,
                    json=payload
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
                if response.status_code == 200:
                    result = response.json()
                    
                    if attempt > 0:
                        logger.info(f"‚úÖ OpenRouter API —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ {attempt + 1}: –º–æ–¥–µ–ª—å={model}")
                    else:
                        logger.info(f"–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenRouter API: –º–æ–¥–µ–ª—å={model}")
                    
                    return result
                else:
                    # –û—à–∏–±–∫–∞ HTTP
                    error_text = response.text
                    error_msg = f"HTTP {response.status_code}: {error_text}"
                    
                    if response.status_code == 401:
                        logger.error(f"‚ùå OpenRouter API: –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (401)")
                        logger.error(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π API –∫–ª—é—á: {self.api_key[:15]}...")
                        logger.error(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏: {self.headers}")
                        logger.error(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {error_text}")
                        # –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                        break
                    
                    raise Exception(error_msg)
                
            except Exception as e:
                last_error = e
                error_msg = str(e)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∑–∞–ø—Ä–æ—Å
                if attempt < MAX_RETRIES - 1 and self._is_retryable_error(e):
                    logger.warning(f"‚ö†Ô∏è OpenRouter API –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{MAX_RETRIES}): {error_msg}")
                    continue
                else:
                    # –≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏–ª–∏ –Ω–µ retryable –æ—à–∏–±–∫–∞
                    if self._is_retryable_error(e):
                        logger.error(f"‚ùå OpenRouter API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ {MAX_RETRIES} –ø–æ–ø—ã—Ç–æ–∫: {error_msg}")
                    else:
                        logger.error(f"‚ùå OpenRouter API –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {error_msg}")
                    break
        
        # –ï—Å–ª–∏ –¥–æ—à–ª–∏ –¥–æ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
        logger.error(f"–í—Å–µ {MAX_RETRIES} –ø–æ–ø—ã—Ç–∫–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ OpenRouter API –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}")
        return None

    @graceful_degradation(fallback_function=None)
    async def generate_post(
        self,
        topic: str,
        system_prompt: str,
        model: str = None
    ) -> Optional[Dict[str, Any]]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å—Ç —á–µ—Ä–µ–∑ OpenRouter
        
        Args:
            topic: –¢–µ–º–∞ –ø–æ—Å—Ç–∞
            system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
            model: –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç OPENROUTER_POST_MODEL)
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        messages = [
            {
                "role": "system",
                "content": system_prompt
            },
            {
                "role": "user",
                "content": f"–°–æ–∑–¥–∞–π –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É: {topic}"
            }
        ]
        
        return await self.generate_content(
            messages=messages,
            model=model,
            use_for_posts=True
        )

    @graceful_degradation(fallback_function=None)
    async def generate_image_prompt(
        self,
        post_text: str,
        model: str = None
    ) -> Optional[str]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
        
        Args:
            post_text: –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–ø—Ç
            model: –ú–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç OPENROUTER_IMAGE_PROMPT_MODEL)
        
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –ø—Ä–æ–º–ø—Ç–æ–º –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        """
        # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        system_prompt = """–¢—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –°–æ–∑–¥–∞–≤–∞–π –∫—Ä–∞—Ç–∫–∏–µ –∏ –ø–æ–Ω—è—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ç–µ–º–µ –ø–æ—Å—Ç–∞. 

–ü—Ä–æ–º–ø—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:
- –ù–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∏ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–º
- –ë–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å–ª–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
- –§–æ–∫—É—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –Ω–∞ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö

–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –ø—Ä–æ–º–ø—Ç–æ–º, –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π."""

        messages = [
            {
                "role": "system",
                "content": system_prompt
            },
            {
                "role": "user",
                "content": f"–°–æ–∑–¥–∞–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ —ç—Ç–æ–º—É –ø–æ—Å—Ç—É:\n\n{post_text}"
            }
        ]
        
        result = await self.generate_content(
            messages=messages,
            model=model,
            use_for_posts=False,
            max_tokens=200,
            temperature=0.8
        )
        
        if result and result.get("choices"):
            content = result["choices"][0]["message"]["content"]
            return self._fix_html_tags(content.strip())
        
        return None

    def _fix_html_tags(self, text: str) -> str:
        """
        –£–±–∏—Ä–∞–µ—Ç HTML —Ç–µ–≥–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
        
        Args:
            text: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
            
        Returns:
            –¢–µ–∫—Å—Ç –±–µ–∑ HTML —Ç–µ–≥–æ–≤
        """
        import re
        # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
        clean_text = re.sub(r'<[^>]+>', '', text)
        return clean_text.strip()

    def get_available_models(self) -> Dict[str, str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –º–æ–¥–µ–ª—è–º–∏ {–Ω–∞–∑–≤–∞–Ω–∏–µ: –æ–ø–∏—Å–∞–Ω–∏–µ}
        """
        return {
            "deepseek/deepseek-r1:free": "DeepSeek R1 (–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è)",
            "openai/gpt-4o-mini-2024-07-18": "GPT-4o Mini (–ø–ª–∞—Ç–Ω–∞—è)",
            "anthropic/claude-sonnet-4": "Claude Sonnet 4 (–ø–ª–∞—Ç–Ω–∞—è)",
            "mistralai/mistral-nemo:free": "Mistral Nemo (–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è)",
            "google/gemma-2-9b-it:free": "Google Gemma 2 9B (–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è)"
        }

    async def close(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç HTTP –∫–ª–∏–µ–Ω—Ç"""
        if self.client:
            await self.client.aclose()

    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        if hasattr(self, 'client') and self.client:
            # –í –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
            pass 