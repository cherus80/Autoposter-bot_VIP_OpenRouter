# services/vk_service.py - –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å VK API
import vk_api
import requests
import logging
from config import VK_ACCESS_TOKEN, VK_GROUP_ID, VK_CTA_TEXT

class VKService:
    def __init__(self):
        self.token = VK_ACCESS_TOKEN
        self.group_id = VK_GROUP_ID
        self.cta_text = VK_CTA_TEXT
        self.is_configured = False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
        if not all([VK_ACCESS_TOKEN, VK_GROUP_ID]):
            logging.warning("VK_ACCESS_TOKEN –∏/–∏–ª–∏ VK_GROUP_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. VK –ø—É–±–ª–∏–∫–∞—Ü–∏—è –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            self.vk_session = None
            self.vk = None
        else:
            try:
                self.vk_session = vk_api.VkApi(token=self.token)
                self.vk = self.vk_session.get_api()
                self.is_configured = True
                logging.info("VK —Å–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ VK API: {e}")
                self.vk_session = None
                self.vk = None

    async def post_to_group(self, content: str, image_url: str = None):
        """–ü—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Å—Ç –Ω–∞ —Å—Ç–µ–Ω–µ –≥—Ä—É–ø–ø—ã VK."""
        if not self.is_configured:
            logging.warning("VK —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –≤ VK.")
            return False
            
        try:
            attachments = ''
            
            # –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç –Ω—É–ª–µ–≤—ã—Ö –±–∞–π—Ç–æ–≤
            clean_content = content.replace('\x00', '')
            
            if image_url:
                print(f"INFO: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_url}")
                photo_attachment = await self.upload_image(image_url)
                if photo_attachment:
                    attachments = photo_attachment
                    print(f"INFO: Attachment —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {attachments}")
                else:
                    print("WARNING: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

            post_text = clean_content
            if self.cta_text and self.cta_text not in post_text:
                post_text += self.cta_text
            
            print(f"INFO: –ü—É–±–ª–∏–∫—É–µ–º –ø–æ—Å—Ç —Å attachments: '{attachments}'")
            
            self.vk.wall.post(
                owner_id=f"-{self.group_id}",
                from_group=1,
                message=post_text,
                attachments=attachments
            )
            print("INFO: –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ VK.")
            return True
            
        except Exception as e:
            print(f"ERROR: –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ VK: {e}")
            return False

    async def upload_image(self, image_url: str) -> str | None:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL –Ω–∞ —Å–µ—Ä–≤–µ—Ä VK."""
        if not self.is_configured:
            logging.warning("VK —Å–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return None
            
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
            upload_server = self.vk.photos.getWallUploadServer(group_id=self.group_id)
            upload_url = upload_server['upload_url']

            # 2. –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL
            response = requests.get(image_url, stream=True)
            response.raise_for_status()
            
            # 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä VK
            files = {'photo': ('image.jpg', response.content, 'image/jpeg')}
            upload_response = requests.post(upload_url, files=files).json()
            
            if not upload_response.get('photo'):
                 raise Exception(f"VK API upload error: {upload_response}")

            # 4. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –Ω–∞ —Å—Ç–µ–Ω–µ
            save_response = self.vk.photos.saveWallPhoto(
                group_id=self.group_id,
                photo=upload_response['photo'],
                server=upload_response['server'],
                hash=upload_response['hash']
            )[0]
            
            owner_id = save_response['owner_id']
            photo_id = save_response['id']
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–∞ —Å—Ç–µ–Ω–µ –≥—Ä—É–ø–ø—ã
            return f"photo{owner_id}_{photo_id}"

        except Exception as e:
            print(f"ERROR: –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ VK: {e}")
            return None

    def adapt_text_for_vk(self, text: str):
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è VK"""
        # –ó–∞–º–µ–Ω—è–µ–º —ç–º–æ–¥–∑–∏ –Ω–∞ VK-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–µ
        emoji_map = {
            "ü§ñ": "ü§ñ",
            "üöÄ": "üöÄ", 
            "üí°": "üí°",
            "‚ö°": "‚ö°",
            "üî•": "üî•"
        }
        
        for tg_emoji, vk_emoji in emoji_map.items():
            text = text.replace(tg_emoji, vk_emoji)
        
        return text 