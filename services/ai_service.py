# services/ai_service.py - –°–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç—ã —Å –ò–ò —á–µ—Ä–µ–∑ OpenRouter.ai
import fal_client
import openai
from config import OPENROUTER_API_KEY, OPENROUTER_POST_MODEL, OPENROUTER_IMAGE_PROMPT_MODEL, PROXY_URL, FAL_AI_KEY, OPENAI_API_KEY
import logging
import json
import random
import re
from managers.prompt_manager import PromptManager
from services.image_service import ImageService
from services.openrouter_service import OpenRouterService
from templates.style_examples import get_style_examples_text
from utils.error_handler import APIWrapper, ErrorSeverity, graceful_degradation, handle_errors

def clean_post_text(text: str) -> str:
    """–£–¥–∞–ª—è–µ—Ç –∏–∑ –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—Å—Ç–∞ '–ó–∞–≥–æ–ª–æ–≤–æ–∫: ...' –∏ –ø–æ–¥–æ–±–Ω—ã–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –∞ —Ç–∞–∫–∂–µ –æ—á–∏—â–∞–µ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ HTML —Ç–µ–≥–∏."""
    # –£–¥–∞–ª—è–µ–º '–ó–∞–≥–æ–ª–æ–≤–æ–∫: "..."' –∏–ª–∏ '–¢–µ–º–∞: "..."' –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–µ–≥–∏—Å—Ç—Ä
    text = re.sub(r'^(?:–ó–∞–≥–æ–ª–æ–≤–æ–∫|–¢–µ–º–∞|Title):?\s*["¬´]?(.*?["¬ª]?\n+)', '', text.strip(), flags=re.IGNORECASE)
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ '–ó–∞–≥–æ–ª–æ–≤–æ–∫: ' –∏–ª–∏ '–¢–µ–º–∞: ', –µ—Å–ª–∏ –æ–Ω–∏ –≤ –Ω–∞—á–∞–ª–µ
    text = re.sub(r'^(?:–ó–∞–≥–æ–ª–æ–≤–æ–∫|–¢–µ–º–∞|Title):?\s*', '', text.strip(), flags=re.IGNORECASE)
    
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ HTML —Ç–µ–≥–∏ –Ω–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∏–ª–∏ —É–±–∏—Ä–∞–µ–º –∏—Ö
    # <br> -> –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ (Telegram –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç <br>)
    text = re.sub(r'<br\s*/?>', '\n', text, flags=re.IGNORECASE)
    
    # –£–±–∏—Ä–∞–µ–º –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–µ–≥–∏: <p>, <div>, <span> –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Å—Ç–∞–µ—Ç—Å—è
    text = re.sub(r'</?(?:p|div|span)[^>]*>', '', text, flags=re.IGNORECASE)
    
    # –£–±–∏—Ä–∞–µ–º –¥—Ä—É–≥–∏–µ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–µ–≥–∏ –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    text = re.sub(r'</?(?:em|strong|h[1-6]|ul|ol|li)[^>]*>', '', text, flags=re.IGNORECASE)
    
    return text.strip()

# –ü—Ä–æ–º–ø—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –≤ –ë–î –Ω–∏—á–µ–≥–æ –Ω–µ—Ç
DEFAULT_VISUAL_PROMPT = """
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Å—Ç –∏ –∏–∑–≤–ª–µ–∫–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –°–¶–ï–ù–´ —Å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–º.

–í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª—è–º–∏:
- "main_action": –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ ("debugging Python code", "configuring API", "testing bot automation")
- "environment": –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Å—Ç–∞–Ω–æ–≤–∫–∞ ("late night coding setup", "modern home office with multiple monitors", "professional workspace")
- "objects": —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã (["MacBook Pro", "external 4K monitors", "mechanical keyboard", "coffee mug", "notebook with sketches"])
- "mood": —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ ("intensely focused", "problem-solving mode", "breakthrough moment", "frustrated debugging")
- "tech_context": —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ (["Python code on screen", "API documentation", "bot interface", "terminal windows", "GitHub repository"])
- "lighting": –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –æ—Å–≤–µ—â–µ–Ω–∏—è ("blue screen glow with warm desk lamp", "late night coding ambiance", "focused task lighting")
- "composition": —Ä–∞–∫—É—Ä—Å –∫–∞–¥—Ä–∞ ("over shoulder view of screens", "three-quarter profile working", "side angle coding")
- "story_moment": –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç ("debugging session", "successful API integration", "bot deployment", "code review")
"""

class AIService:
    def __init__(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenRouter —Å–µ—Ä–≤–∏—Å
        self.openrouter_service = OpenRouterService()
        self.image_service = ImageService()
        self.prompt_manager = PromptManager()
        
        # –ú–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∑–∞–¥–∞—á
        self.post_model = OPENROUTER_POST_MODEL
        self.image_prompt_model = OPENROUTER_IMAGE_PROMPT_MODEL
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (–µ—Å–ª–∏ –∫–ª—é—á –¥–æ—Å—Ç—É–ø–µ–Ω)
        self.openai_client = None
        if OPENAI_API_KEY:
            self.openai_client = openai.AsyncOpenAI(api_key=OPENAI_API_KEY)
            logging.info("OpenAI –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
        else:
            logging.warning("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        
        # fal-client –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è FAL_KEY,
        # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.
        if not FAL_AI_KEY:
            logging.warning("FAL_AI_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å OpenRouter
        if not OPENROUTER_API_KEY:
            logging.warning("OPENROUTER_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏. AI —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        
        logging.info(f"AIService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –º–æ–¥–µ–ª—è–º–∏: posts={self.post_model}, image_prompts={self.image_prompt_model}")
    
    def get_available_models(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ OpenRouter"""
        return self.openrouter_service.get_available_models() if self.openrouter_service.client else {}
    
    @handle_errors(context="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞", severity=ErrorSeverity.HIGH, fallback_return=None)
    async def generate_post(self, topic: str = None, custom_prompt: str = None, with_image: bool = False, image_style: str = None, system_prompt: str | None = None, model: str = None):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å—Ç —á–µ—Ä–µ–∑ OpenRouter. –ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–º—É –∏–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç.
        –ï—Å–ª–∏ with_image=True, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
        """
        image_url = None

        # 1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω.
        system_prompt = system_prompt or custom_prompt or await self.prompt_manager.get_prompt('content_generation')

        # –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –≤—Å–µ –µ—â–µ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
        if not system_prompt:
            logging.error("System prompt for content is not set. Using a default one.")
            system_prompt = """–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –∏ –±–ª–æ–≥–µ—Ä –ø–æ AI –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏. –ü–∏—à–∏ –¢–û–õ–¨–ö–û –ø–æ-—Ä—É—Å—Å–∫–∏ –ø–æ—Å—Ç—ã –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ Telegram-–∫–∞–Ω–∞–ª–∞ –ø—Ä–æ AI –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û! –°—Ç—Ä–æ–≥–æ —Å–æ–±–ª—é–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É:

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê:
1. <b>–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç/—Ü–∏—Ñ—Ä–∞: –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b>
2. –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
3. üéØ –≠–º–æ–¥–∑–∏ + –ø–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
4. üöÄ –≠–º–æ–¥–∑–∏ + –≤—Ç–æ—Ä–æ–π –∞–±–∑–∞—Ü (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)  
5. üìä –≠–º–æ–¥–∑–∏ + —Ç—Ä–µ—Ç–∏–π –∞–±–∑–∞—Ü —Å —Ü–∏—Ñ—Ä–∞–º–∏ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
6. üí° –≠–º–æ–¥–∑–∏ + —á–µ—Ç–≤–µ—Ä—Ç—ã–π –∞–±–∑–∞—Ü (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
7. ‚ö° –≠–º–æ–¥–∑–∏ + –ø—è—Ç—ã–π –∞–±–∑–∞—Ü (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
8. üî• –≠–º–æ–¥–∑–∏ + —à–µ—Å—Ç–æ–π –∞–±–∑–∞—Ü (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
9. –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
10. –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é —Å –ø–æ–¥–ø–∏—Å–∫–æ–π –Ω–∞ –∫–∞–Ω–∞–ª (—É–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É —Ç–∏–ø–∞ https://t.me/+abc123)
11. –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
12. 3-5 —Ö—ç—à—Ç–µ–≥–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª

–§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó –ò–°–ö–õ–Æ–ß–ï–ù–ò–ô:
‚Ä¢ –¢–û–õ–¨–ö–û HTML-—Ç–µ–≥–∏: <b></b> –∏ <i></i>
‚Ä¢ –ù–ò–ö–ê–ö–ò–• ** –∏–ª–∏ __ —Å–∏–º–≤–æ–ª–æ–≤!
‚Ä¢ –¶–∏—Ñ—Ä—ã –∏ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –í–°–ï–ì–î–ê –≤ <b></b>
‚Ä¢ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã/—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –≤ <i></i>
‚Ä¢ –û–¥–∏–Ω —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ –∞–±–∑–∞—Ü–∞

HTML –¢–ï–ì–ò - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û:
‚úÖ –†–ê–ó–†–ï–®–ï–ù–û –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:
‚Ä¢ <b>—Ç–µ–∫—Å—Ç</b> - –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞
‚Ä¢ <i>—Ç–µ–∫—Å—Ç</i> - –¥–ª—è –∫—É—Ä—Å–∏–≤–∞

‚ùå –°–¢–†–û–ì–û –ó–ê–ü–†–ï–©–ï–ù–û –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:
‚Ä¢ <br> –∏–ª–∏ <br/> - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫! –ò—Å–ø–æ–ª—å–∑—É–π –æ–±—ã—á–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
‚Ä¢ <p>, </p> - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –∞–±–∑–∞—Ü—ã
‚Ä¢ <div>, </div> - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –±–ª–æ–∫–∏
‚Ä¢ <span>, </span> - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω–ª–∞–π–Ω —ç–ª–µ–º–µ–Ω—Ç—ã  
‚Ä¢ <em>, </em> - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –≤–º–µ—Å—Ç–æ <i>
‚Ä¢ <strong>, </strong> - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –≤–º–µ—Å—Ç–æ <b>
‚Ä¢ <h1>, <h2>, <h3>, <h4>, <h5>, <h6> - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π –∑–∞–≥–æ–ª–æ–≤–∫–∏
‚Ä¢ <ul>, <ol>, <li> - –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Å–ø–∏—Å–∫–∏
‚Ä¢ –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ HTML —Ç–µ–≥–∏ –∫—Ä–æ–º–µ <b> –∏ <i>

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´:
‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ü–∏—Ñ—Ä—ã –≤ –∫–∞–∂–¥–æ–º –ø–æ—Å—Ç–µ
‚Ä¢ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏ ("–∑–∞ 3 –Ω–µ–¥–µ–ª–∏", "–º–µ—Å—è—Ü –Ω–∞–∑–∞–¥")
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤/—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
‚Ä¢ –°—Ä–∞–≤–Ω–µ–Ω–∏—è "–¥–æ/–ø–æ—Å–ª–µ"
‚Ä¢ –õ–∏—á–Ω—ã–π –æ–ø—ã—Ç –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞

–ó–ê–ü–†–ï–©–ï–ù–û:
‚Ä¢ –í–≤–æ–¥–Ω—ã–µ —Ñ—Ä–∞–∑—ã "—á–µ—Å—Ç–Ω–æ –≥–æ–≤–æ—Ä—è", "–ø–æ –æ–ø—ã—Ç—É"
‚Ä¢ –í–æ–¥—è–Ω–∏—Å—Ç—ã–µ –æ–±–æ–±—â–µ–Ω–∏—è
‚Ä¢ –°–∏–º–≤–æ–ª—ã ** –∏–ª–∏ __
‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∏–ø–∞ "–ó–∞–≥–æ–ª–æ–≤–æ–∫:" –∏–ª–∏ "–¢–µ–º–∞:"

–°–¢–ò–õ–¨: –¥–µ—Ä–∑–∫–æ, —É–≤–µ—Ä–µ–Ω–Ω–æ, –±–µ–∑ –≤–æ–¥—ã, —Å—Ä–∞–∑—É –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É. –ü–∏—à–∏ –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–µ–ª–∏—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏."""
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏ —Å—Ç–∏–ª–µ–π
        enhanced_system_prompt = system_prompt + "\n\n" + get_style_examples_text()
        
        logging.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenRouter: –º–æ–¥–µ–ª—å={model or self.post_model}, —Ç–µ–º–∞='{topic}'")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç —á–µ—Ä–µ–∑ OpenRouter
        try:
            result = await self.openrouter_service.generate_post(
                topic=topic or "–∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è —Ç–µ–º–∞",
                system_prompt=enhanced_system_prompt,
                model=model
            )
            
            if not result:
                raise Exception("OpenRouter –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
            
            final_text = result["text"]
            logging.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ OpenRouter: {final_text[:100]}...")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenRouter: {e}")
            raise Exception(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: {e}")

        # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
        if with_image:
            image_url = await self._generate_image_with_fallback(final_text, image_style)

        return {"text": final_text, "image_url": image_url}

    # –°—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏, –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã

    @graceful_degradation(fallback_function=None)
    async def _generate_image_with_fallback(self, post_text: str, image_style: str = None) -> str | None:
        """
        –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å graceful degradation
        """
        logging.info("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        image_prompt_template = await self.prompt_manager.get_prompt('image')
        if not image_prompt_template:
            logging.warning("–ü—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è.")
            return None

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è Fal.ai
        prompt_for_fal_generator = image_prompt_template.replace("{post_text}", post_text)

        system_prompt_for_image = (
            "You are an assistant that creates prompts for an AI artist (like Fal.ai or Midjourney). "
            "Your task is to create a concise but detailed prompt in English based on the provided text and instructions "
            "to generate a beautiful and relevant image. The prompt should be no longer than 100 words."
        )

        logging.info("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –®–ê–ë–õ–û–ù –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenRouter
        try:
            logging.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenRouter")
            
            messages = [
                    {
                        "role": "system", 
                        "content": system_prompt_for_image
                    },
                    {
                        "role": "user", 
                        "content": prompt_for_fal_generator
                    }
                ]
                
            result = await self.openrouter_service.generate_content(
                messages=messages,
                model=None,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                temperature=0.7,
                max_tokens=200,
                use_for_posts=False  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            )
                
            if result and result.get("choices"):
                response_content = result["choices"][0]["message"]["content"]
                logging.info("–ü—Ä–æ–º–ø—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ OpenRouter")
                response = type('obj', (object,), {
                    'choices': [type('obj', (object,), {
                        'message': type('obj', (object,), {'content': response_content})()
                    })()]
                })()
            else:
                response = None
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenRouter: {e}")
            response = None
        
        if not response:
            logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            return None
            
        image_prompt_for_fal = response.choices[0].message.content
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∫ –≥–æ—Ç–æ–≤–æ–º—É –ø—Ä–æ–º–ø—Ç—É, –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
        if image_style and image_style != "none":
            logging.info(f"–î–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Å—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_style}")
            image_prompt_for_fal += f", in the style of {image_style}"
        else:
            logging.info("–°—Ç–∏–ª—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ 'none'.")
        
        logging.info(f"–§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è fal.ai: {image_prompt_for_fal[:100]}...")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ fal.ai —Å –ø—Ä–æ–º–ø—Ç–æ–º: {image_prompt_for_fal[:70]}...")
        try:
            image_url = await self.image_service.generate_post_image(image_prompt_for_fal)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            image_url = None
        
        if image_url:
            logging.info("–û—Ç–≤–µ—Ç –æ—Ç fal.ai –ø–æ–ª—É—á–µ–Ω.")
        else:
            logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
            
        return image_url
    
    async def generate_post_from_plan(self, system_prompt: str, content_plan_topic, with_image: bool = False, image_style: str = None):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞.
        –°–æ–∑–¥–∞–µ—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–µ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏.
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ system_prompt –Ω–µ None
        if not system_prompt:
            logging.error("System prompt –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
            raise Exception("System prompt –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ –º–µ–Ω—é –±–æ—Ç–∞.")
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø—Ä–æ–º–ø—Ç–µ
        final_system_prompt = system_prompt.format(
            category=getattr(content_plan_topic, 'category', ''),
            theme=getattr(content_plan_topic, 'theme', ''),
            topic=getattr(content_plan_topic, 'theme', ''),  # –î–æ–±–∞–≤–ª—è–µ–º topic –∫–∞–∫ –∞–ª–∏–∞—Å –¥–ª—è theme
            post_description=getattr(content_plan_topic, 'post_description', '')
        )
        
        # –£–±–∏—Ä–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –¥–ª–∏–Ω—É - –ø—É—Å—Ç—å –ø—Ä–æ–º–ø—Ç —Å–∞–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ
        if with_image:
            # –î–ª—è –ø–æ—Å—Ç–æ–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º - —É–º–µ—Ä–µ–Ω–Ω–∞—è –¥–ª–∏–Ω–∞
            length_prompt = "–í–∞–∂–Ω–æ: –ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–º –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º (350-450 —Å–ª–æ–≤). –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –¥–æ–ø–æ–ª–Ω—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ."
        else:
            # –î–ª—è –ø–æ—Å—Ç–æ–≤ –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç  
            length_prompt = "–í–∞–∂–Ω–æ: –ü–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–º –∏ —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º (500-600 —Å–ª–æ–≤). –†–∞—Å–∫—Ä–æ–π —Ç–µ–º—É –ø–æ–ª–Ω–æ—Å—Ç—å—é, –¥–æ–±–∞–≤—å –ª–∏—á–Ω—ã–π –æ–ø—ã—Ç –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã."
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –¥–ª–∏–Ω–µ
        final_system_prompt += f"\\n\\n{length_prompt}"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ generate_post –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        try:
            result = await self.generate_post(
                topic=getattr(content_plan_topic, 'theme', ''),
                custom_prompt=None,
                with_image=with_image,
                image_style=image_style,
                system_prompt=final_system_prompt
            )
            
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            cleaned_content = clean_post_text(result["text"])
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é –∏ —É–ª—É—á—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
            from utils.text_utils import TextUtils
            improved_content = TextUtils.improve_post_quality(cleaned_content)
            
            humanized_content = await self.humanize_post(improved_content)
            
            return {
                "text": humanized_content,
                "image_url": result.get("image_url")
            }
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞: {e}")
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–∞")
    
    async def extract_visual_elements(self, post_text: str) -> dict:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –ø–æ—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–æ–º–ø—Ç –∏–∑ –ë–î."""
        
        system_prompt = await self.prompt_manager.get_prompt('image') or DEFAULT_VISUAL_PROMPT
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenRouter –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            logging.info("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ OpenRouter")
            
            messages = [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": f"–ü–æ—Å—Ç: {post_text}"}
            ]
            
            result = await self.openrouter_service.generate_content(
                messages=messages,
                model=None,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                temperature=0.8,
                max_tokens=500,
                use_for_posts=False
            )
            
            if result and result.get("choices"):
                response_content = result["choices"][0]["message"]["content"]
                response = type('obj', (object,), {
                    'choices': [type('obj', (object,), {
                        'message': type('obj', (object,), {'content': response_content})()
                    })()]
                })()
            else:
                response = None
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ OpenRouter: {e}")
            response = None
        
        if not response:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç
            return {
                "main_action": "programming on computer",
                "environment": "modern coding setup with multiple monitors",
                "objects": ["laptop", "external monitors", "coffee"],
                "mood": "focused",
                "tech_context": ["code on screens"],
                "lighting": "blue screen glow",
                "composition": "three-quarter view",
                "story_moment": "coding session"
            }
        
        try:
            return json.loads(response.choices[0].message.content)
        except json.JSONDecodeError:
            # Fallback –µ—Å–ª–∏ JSON –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª—Å—è
            return {
                "main_action": "programming on computer",
                "environment": "modern coding setup with multiple monitors",
                "objects": ["laptop", "external monitors", "coffee"],
                "mood": "focused",
                "tech_context": ["code on screens"],
                "lighting": "blue screen glow",
                "composition": "three-quarter view",
                "story_moment": "coding session"
            }
    
    async def generate_contextual_image_with_character(self, post_text: str, style: str = None) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        - –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –µ–≥–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —á–µ—Ä–µ–∑ GPT.
        - –ï—Å–ª–∏ –Ω–µ—Ç, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∏ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
        """
        custom_image_prompt_template = await self.prompt_manager.get_prompt('image')

        if custom_image_prompt_template:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –∫–∞–∫ –®–ê–ë–õ–û–ù –¥–ª—è GPT.
            logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –®–ê–ë–õ–û–ù –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
            
            try:
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è fal.ai —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º Perplexity
                try:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º OpenRouter –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
                    logging.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —á–µ—Ä–µ–∑ OpenRouter")
                    
                    messages = [
                            {"role": "system", "content": custom_image_prompt_template},
                            {"role": "user", "content": post_text}
                    ]
                    
                    result = await self.openrouter_service.generate_content(
                        messages=messages,
                        model=None,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                        temperature=0.7,
                        max_tokens=200,
                        use_for_posts=False
                    )
                    
                    if result and result.get("choices"):
                        response_content = result["choices"][0]["message"]["content"]
                        response = type('obj', (object,), {
                            'choices': [type('obj', (object,), {
                                'message': type('obj', (object,), {'content': response_content})()
                            })()]
                        })()
                    else:
                        response = None
                        
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ —á–µ—Ä–µ–∑ OpenRouter: {e}")
                    response = None
                
                if response:
                    scene_description = response.choices[0].message.content.strip()
                else:
                    # Fallback –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç
                    scene_description = f"A photorealistic image inspired by the following text: {post_text}"
                logging.info(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è fal.ai: {scene_description[:150]}...")

            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é GPT: {e}")
                # Fallback –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
                scene_description = f"A photorealistic image inspired by the following text: {post_text}"

        else:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –†–∞–±–æ—Ç–∞–µ–º –ø–æ —Å—Ç–∞—Ä–æ–π —Å—Ö–µ–º–µ —Å JSON.
            logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ (JSON).")
            visual_elements = await self.extract_visual_elements(post_text)
            
            # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–º–ø—Ç —Ç–æ–ª—å–∫–æ –∏–∑ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –±–µ–∑ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.
            scene_description = f"""
            {visual_elements.get('main_action', 'working on computer')}, 
            {visual_elements.get('composition', 'three-quarter view')},
            {visual_elements.get('environment', 'modern office setup')}, 
            {visual_elements.get('mood', 'focused')} expression,
            detailed scene with {', '.join(visual_elements.get('objects', ['multiple monitors']))},
            {visual_elements.get('lighting', 'blue screen glow')},
            showing {', '.join(visual_elements.get('tech_context', ['code on screens']))},
            capturing {visual_elements.get('story_moment', 'work moment')},
            professional photography, detailed, realistic, high quality
            """
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª—å –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –µ—Å–ª–∏ –æ–Ω –≤—ã–±—Ä–∞–Ω
        if style and style.lower() != 'none':
            scene_description += f", in the style of {style}"
            
        # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
        return " ".join(scene_description.strip().split())
    
    async def generate_image_with_fal_api(self, post_text: str, image_style: str = None) -> dict:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ FAL API —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º fal-client."""
        
        if not FAL_AI_KEY:
            return {"success": False, "error": "FAL_AI_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"}
        
        prompt = await self.generate_contextual_image_with_character(post_text, style=image_style)
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è fal-client
        payload = {
            "prompt": prompt,
            "image_size": "landscape_4_3",
            "num_inference_steps": 28,
            "guidance_scale": 3.5,
            "num_images": 1,
            "enable_safety_checker": True,
            "seed": random.randint(0, 2**32 - 1) # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π seed –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        }
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º fal_client.run_async –¥–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞
            logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ fal.ai —Å –ø—Ä–æ–º–ø—Ç–æ–º: {prompt[:100]}...")
            result = await fal_client.run_async(
                "fal-ai/flux/dev",
                arguments=payload
            )
            logging.info("–û—Ç–≤–µ—Ç –æ—Ç fal.ai –ø–æ–ª—É—á–µ–Ω.")
            
            return {
                "success": True,
                "image_url": result["images"][0]["url"],
                "prompt_used": prompt
            }
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ fal-client: {e}")
            return {"success": False, "error": f"–û—à–∏–±–∫–∞ fal-client: {str(e)}"}
    
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    async def generate_image_prompt(self, post_text: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π."""
        return await self.generate_contextual_image_with_character(post_text)
    
    async def generate_story_based_image(self, post_text: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ—Å—Ç–∞."""
        return await self.generate_contextual_image_with_character(post_text)
    
    async def humanize_post(self, content: str):
        """–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - —Ç–æ–ª—å–∫–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        return content

    async def transcribe_audio(self, audio_file_path: str) -> str:
        """
        –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é OpenAI Whisper.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç None –µ—Å–ª–∏ OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.
        """
        if not self.openai_client:
            logging.warning("OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
            return None
            
        try:
            with open(audio_file_path, "rb") as audio_file:
                transcription = await self.openai_client.audio.transcriptions.create(
                    model="whisper-1",
                    file=audio_file
                )
            return transcription.text
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
            return None
