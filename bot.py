"""bot.py ‚Äî —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ Telegram‚Äë–±–æ—Ç–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–µ—Ä–∞
=================================================
–°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å aiogram 3.7 (Python 3.12).

–û—Å–Ω–æ–≤–Ω–æ–µ:
* –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç slash‚Äë–º–µ–Ω—é.
* –í—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
* –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (`PostScheduler`).
* –ü–æ–¥–∫–ª—é—á–∞–µ—Ç –∞–¥–º–∏–Ω‚Äë—Ä–æ—É—Ç–µ—Ä—ã + middleware –ø—Ä–æ–≤–µ—Ä–∫–∏ ADMIN_ID.
"""
from __future__ import annotations

import asyncio
import logging
import os
from typing import List

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram_sqlite_storage.sqlitestore import SQLStorage
from aiogram.types import (
    BotCommand,
    BotCommandScopeAllPrivateChats,
    InlineKeyboardMarkup,
    MenuButtonCommands,
    Message,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import text

from config import BOT_TOKEN, ADMIN_IDS
from database.database import init_db, async_session_maker
from handlers import admin_handlers
from handlers import menu, stats, auto_mode, generate_post, settings, prompts, content_plan, backup
from services.scheduler import PostScheduler
from services.backup_scheduler import backup_scheduler
from utils.error_handler import init_error_handler, ErrorSeverity, error_handler

# ---------------------------------------------------------------------------
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∑–∞–ø–∏—Å—å—é –≤ —Ñ–∞–π–ª
# ---------------------------------------------------------------------------
import logging.handlers

# –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π –ª–æ–≥–≥–µ—Ä
root_logger = logging.getLogger()
root_logger.setLevel(logging.INFO)

# –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
for handler in root_logger.handlers[:]:
    root_logger.removeHandler(handler)

# –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
formatter = logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

# 1. –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_handler.setFormatter(formatter)
root_logger.addHandler(console_handler)

# 2. –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π (–æ—Å–Ω–æ–≤–Ω—ã–µ –ª–æ–≥–∏)
file_handler = logging.handlers.RotatingFileHandler(
    'bot.log',
    maxBytes=10*1024*1024,  # 10 MB
    backupCount=5,          # –•—Ä–∞–Ω–∏—Ç—å 5 —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
    encoding='utf-8'
)
file_handler.setLevel(logging.INFO)
file_handler.setFormatter(formatter)
root_logger.addHandler(file_handler)

# 3. –û—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –æ—à–∏–±–æ–∫
error_handler = logging.handlers.RotatingFileHandler(
    'bot_errors.log',
    maxBytes=5*1024*1024,   # 5 MB
    backupCount=3,          # –•—Ä–∞–Ω–∏—Ç—å 3 —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–∞
    encoding='utf-8'
)
error_handler.setLevel(logging.ERROR)
error_handler.setFormatter(formatter)
root_logger.addHandler(error_handler)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏ –¥–ª—è –≤—Å–µ—Ö –∫–ª—é—á–µ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
logger = logging.getLogger(__name__)
logging.getLogger('services.ai_service').setLevel(logging.INFO)
logging.getLogger('services.openrouter_service').setLevel(logging.INFO)
logging.getLogger('services.scheduler').setLevel(logging.INFO)
logging.getLogger('services.image_service').setLevel(logging.INFO)
logging.getLogger('handlers').setLevel(logging.INFO)
logging.getLogger('managers').setLevel(logging.INFO)

# –£–º–µ–Ω—å—à–∞–µ–º —à—É–º –æ—Ç aiogram –∏ httpx
logging.getLogger('aiogram').setLevel(logging.WARNING)
logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('httpcore').setLevel(logging.WARNING)

logger.info("üöÄ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: –∫–æ–Ω—Å–æ–ª—å + —Ñ–∞–π–ª—ã (bot.log, bot_errors.log)")

# ---------------------------------------------------------------------------
# Bot / Dispatcher
# ---------------------------------------------------------------------------
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ FSM
# –í Docker –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é /app/database, –ª–æ–∫–∞–ª—å–Ω–æ - –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞
if os.path.exists('/app/database'):
    storage_path = '/app/database/fsm_storage.db'
else:
    storage_path = 'fsm_storage.db'
storage = SQLStorage(storage_path, serializing_method="pickle")
dp = Dispatcher(storage=storage)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –≤ main)
scheduler: PostScheduler | None = None

# ---------------------------------------------------------------------------
# Helpers
# ---------------------------------------------------------------------------

def build_inline_main_menu() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –∏ UX"""
    builder = InlineKeyboardBuilder()

    # üéØ –û–°–ù–û–í–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø (1-2 —Å—Ç—Ä–æ–∫–∏)
    builder.button(text="‚úçÔ∏è –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç", callback_data="menu:generate_post")
    builder.button(text="ü§ñ –ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥", callback_data="menu:auto_mode")
    builder.adjust(1, 1)  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –¥–ª—è –∞–∫—Ü–µ–Ω—Ç–∞

    # üìä –£–ü–†–ê–í–õ–ï–ù–ò–ï (3 —Å—Ç—Ä–æ–∫–∞)
    builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu:stats")
    builder.adjust(1)
    
    builder.button(text="üìÖ –ö–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω", callback_data="content:show")
    builder.adjust(1)

    # ‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò (4-5 —Å—Ç—Ä–æ–∫–∏)
    builder.button(text="üìù –ü—Ä–æ–º–ø—Ç —Ç–µ–∫—Å—Ç–∞", callback_data="menu:set_content_prompt")
    builder.button(text="üñºÔ∏è –ü—Ä–æ–º–ø—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="menu:set_image_prompt")
    builder.adjust(2)
    
    builder.button(text="üì§ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", callback_data="menu:publishing_settings")
    builder.adjust(1)

    # üìã –ö–û–ù–¢–ï–ù–¢ (6 —Å—Ç—Ä–æ–∫–∞)
    builder.button(text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–ª–∞–Ω", callback_data="menu:upload_content_plan")
    builder.adjust(1)

    # üíæ –†–ï–ó–ï–†–í–ù–û–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï (7 —Å—Ç—Ä–æ–∫–∞)
    builder.button(text="üíæ –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data="backup:main")
    builder.adjust(1)

    # ‚ùì –ü–û–ú–û–©–¨ (8 —Å—Ç—Ä–æ–∫–∞)
    builder.button(text="‚ùì –°–ø—Ä–∞–≤–∫–∞", callback_data="menu:help")
    builder.adjust(1)

    return builder.as_markup()


async def set_main_menu(bot: Bot) -> None:
    """–°–æ–∑–¥–∞—ë—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–µ slash‚Äë–º–µ–Ω—é –∏ –∫–Ω–æ–ø–∫—É ¬´–ú–µ–Ω—é¬ª –≤ UI Telegram."""
    logger.info("–ù–∞—á–∏–Ω–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é‚Ä¶")
    main_menu_commands: List[BotCommand] = [
        BotCommand(command="start", description="üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="menu", description="‚ñ∂Ô∏è –ì–ª–∞–≤–Ω–æ–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"),
    ]
    await bot.set_my_commands(main_menu_commands, scope=BotCommandScopeAllPrivateChats())
    await bot.set_chat_menu_button(menu_button=MenuButtonCommands())
    logger.info("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –∫–Ω–æ–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")


async def run_migration() -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ–ª–æ–Ω–∫–∏, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç."""
    async with async_session_maker() as session:
        async with session.begin():
            # –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã posts
            res = await session.execute(text("PRAGMA table_info(posts);"))
            cols = [row[1] for row in res.fetchall()]
            
            if "with_image" not in cols:
                logger.info("–î–æ–±–∞–≤–ª—è—é –∫–æ–ª–æ–Ω–∫—É 'with_image' –≤ posts‚Ä¶")
                await session.execute(
                    text("ALTER TABLE posts ADD COLUMN with_image BOOLEAN DEFAULT FALSE;")
                )
                logger.info("–ö–æ–ª–æ–Ω–∫–∞ 'with_image' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ posts.")
            else:
                logger.info("–ö–æ–ª–æ–Ω–∫–∞ 'with_image' —É–∂–µ –µ—Å—Ç—å –≤ posts.")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è ID –ø–æ—Å—Ç–æ–≤ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö
            if "telegram_message_id" not in cols:
                logger.info("–î–æ–±–∞–≤–ª—è—é –∫–æ–ª–æ–Ω–∫—É 'telegram_message_id' –≤ posts‚Ä¶")
                await session.execute(
                    text("ALTER TABLE posts ADD COLUMN telegram_message_id TEXT;")
                )
                logger.info("–ö–æ–ª–æ–Ω–∫–∞ 'telegram_message_id' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ posts.")
            else:
                logger.info("–ö–æ–ª–æ–Ω–∫–∞ 'telegram_message_id' —É–∂–µ –µ—Å—Ç—å –≤ posts.")
            
            if "vk_post_id" not in cols:
                logger.info("–î–æ–±–∞–≤–ª—è—é –∫–æ–ª–æ–Ω–∫—É 'vk_post_id' –≤ posts‚Ä¶")
                await session.execute(
                    text("ALTER TABLE posts ADD COLUMN vk_post_id TEXT;")
                )
                logger.info("–ö–æ–ª–æ–Ω–∫–∞ 'vk_post_id' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ posts.")
            else:
                logger.info("–ö–æ–ª–æ–Ω–∫–∞ 'vk_post_id' —É–∂–µ –µ—Å—Ç—å –≤ posts.")
            
            # –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã content_plan
            try:
                res = await session.execute(text("PRAGMA table_info(content_plan);"))
                content_cols = [row[1] for row in res.fetchall()]
                if "with_image" not in content_cols:
                    logger.info("–î–æ–±–∞–≤–ª—è—é –∫–æ–ª–æ–Ω–∫—É 'with_image' –≤ content_plan‚Ä¶")
                    await session.execute(
                        text("ALTER TABLE content_plan ADD COLUMN with_image BOOLEAN DEFAULT TRUE;")
                    )
                    logger.info("–ö–æ–ª–æ–Ω–∫–∞ 'with_image' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ content_plan.")
                else:
                    logger.info("–ö–æ–ª–æ–Ω–∫–∞ 'with_image' —É–∂–µ –µ—Å—Ç—å –≤ content_plan.")
            except Exception:
                # –¢–∞–±–ª–∏—Ü–∞ content_plan –º–æ–∂–µ—Ç –µ—â–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
                logger.info("–¢–∞–±–ª–∏—Ü–∞ content_plan –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞.")


# ---------------------------------------------------------------------------
# Handlers
# ---------------------------------------------------------------------------


@dp.message(Command("start"))
async def start_command(message: Message):
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} (@{message.from_user.username})")
    if message.from_user.id in ADMIN_IDS:
        logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {message.from_user.id}")
        await message.answer(
            "ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Autoposter Bot!</b>\n\n"
            "üì± <b>–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø–æ—Å—Ç–æ–≤\n"
            "‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω–æ–º\n\n"
            "üéØ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>",
            reply_markup=build_inline_main_menu(),
        )
    else:
        logger.warning(f"‚ùå –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} (@{message.from_user.username})")
        await message.answer(
            "‚ùå <b>–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
        )

@dp.message(Command("menu"))
async def menu_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /menu - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /menu –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} (@{message.from_user.username})")
    if message.from_user.id in ADMIN_IDS:
        logger.info(f"‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞—é –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {message.from_user.id}")
        await message.answer(
            "üéØ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Autoposter Bot</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            reply_markup=build_inline_main_menu(),
        )
    else:
        logger.warning(f"‚ùå –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")


# ---------------------------------------------------------------------------
# Main
# ---------------------------------------------------------------------------


async def main() -> None:
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ Autoposter Bot...")
    
    # 1. Init DB & migrations
    logger.info("üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await init_db()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
    
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await run_migration()
    logger.info("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã.")

    # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    logger.info("üõ°Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    init_error_handler(bot)
    logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

    # 3. Slash‚Äëmenu
    logger.info("üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –±–æ—Ç–∞...")
    await set_main_menu(bot)
    logger.info("‚úÖ –ú–µ–Ω—é –±–æ—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.")

    # 4. Scheduler
    logger.info("‚è∞ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞...")
    global scheduler
    scheduler = PostScheduler(bot)
    asyncio.create_task(scheduler.start())
    logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω.")

    # 4.1 Backup Scheduler
    logger.info("üíæ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è...")
    backup_scheduler.bot = bot
    asyncio.create_task(backup_scheduler.start())
    logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω.")

    # 5. Dispatcher context
    dp["scheduler"] = scheduler

    # 5. Routers / middleware - –ò–°–ü–†–ê–í–õ–ï–ù–û
    logger.info("üîß –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ middleware –∏ —Ä–æ—É—Ç–µ—Ä–æ–≤...")
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∞–µ–º middleware
    dp.message.middleware(admin_handlers.AdminCheckMiddleware())
    dp.callback_query.middleware(admin_handlers.AdminCheckMiddleware())
    
    # –ó–∞—Ç–µ–º –ø–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    routers = [
        ("menu", menu.router),
        ("stats", stats.router), 
        ("auto_mode", auto_mode.router),
        ("generate_post", generate_post.router),
        ("settings", settings.router),
        ("prompts", prompts.router),
        ("content_plan", content_plan.router),
        ("backup", backup.router)
    ]
    
    for name, router in routers:
        dp.include_router(router)
        logger.info(f"  ‚úÖ –†–æ—É—Ç–µ—Ä {name} –ø–æ–¥–∫–ª—é—á–µ–Ω")

    # 6. Polling
    logger.info("üåê –£–¥–∞–ª–µ–Ω–∏–µ webhook –∏ –∑–∞–ø—É—Å–∫ polling...")
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("üéØ –ë–û–¢ –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï! –ù–∞—á–∏–Ω–∞—é –ø—Ä–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    try:
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    finally:
        logger.info("üîÑ –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
        await bot.session.close()
        logger.info("‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


if __name__ == "__main__":
    asyncio.run(main())